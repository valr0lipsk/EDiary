// <auto-generated />
using System;
using EDiary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDiary.Migrations
{
    [DbContext(typeof(EDContext))]
    [Migration("20220201144620_defIcom")]
    partial class defIcom
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDiary.Models.EmojiStatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("emoji")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("statusId");

                    b.ToTable("emojiStatuses");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.Property<int>("labId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countLabs")
                        .HasColumnType("int");

                    b.Property<string>("labName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("subgroupId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("labId");

                    b.HasIndex("subgroupId");

                    b.HasIndex("teacherId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("labs");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("lessonId");

                    b.HasIndex("lessonTypeId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("EDiary.Models.Mark", b =>
                {
                    b.Property<int>("markId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("markId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentGroup")
                        .HasColumnType("int");

                    b.Property<string>("studentLastname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("studentPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("studentStatus")
                        .HasColumnType("int");

                    b.Property<int>("studentSubgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("studentSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("studentUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("studentId");

                    b.HasIndex("studentGroup");

                    b.HasIndex("studentStatus");

                    b.HasIndex("studentSubgroup");

                    b.HasIndex("studentUser");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Купреенко",
                            studentUser = "3"
                        },
                        new
                        {
                            studentId = 2,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Валерия",
                            studentSubgroup = 0,
                            studentSurname = "Липская",
                            studentUser = "9"
                        },
                        new
                        {
                            studentId = 3,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Анна",
                            studentSubgroup = 0,
                            studentSurname = "Бичевская",
                            studentUser = "10"
                        },
                        new
                        {
                            studentId = 4,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Матвей",
                            studentSubgroup = 0,
                            studentSurname = "Болтромеюк",
                            studentUser = "11"
                        },
                        new
                        {
                            studentId = 5,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Артем",
                            studentSubgroup = 0,
                            studentSurname = "Деревяго",
                            studentUser = "12"
                        },
                        new
                        {
                            studentId = 6,
                            studentGroup = 2,
                            studentLastname = "Николаевна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Барай",
                            studentUser = "13"
                        },
                        new
                        {
                            studentId = 7,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Николай",
                            studentSubgroup = 0,
                            studentSurname = "Беленович",
                            studentUser = "14"
                        },
                        new
                        {
                            studentId = 8,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Владимир",
                            studentSubgroup = 0,
                            studentSurname = "Валькович",
                            studentUser = "15"
                        },
                        new
                        {
                            studentId = 9,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Дарья",
                            studentSubgroup = 0,
                            studentSurname = "Войлокова",
                            studentUser = "16"
                        },
                        new
                        {
                            studentId = 10,
                            studentGroup = 2,
                            studentLastname = "Сергеевна",
                            studentName = "Екатерина",
                            studentSubgroup = 0,
                            studentSurname = "Воронина",
                            studentUser = "17"
                        },
                        new
                        {
                            studentId = 11,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Вусик",
                            studentUser = "18"
                        },
                        new
                        {
                            studentId = 12,
                            studentGroup = 2,
                            studentLastname = "Павлович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Глушков",
                            studentUser = "19"
                        },
                        new
                        {
                            studentId = 13,
                            studentGroup = 2,
                            studentLastname = "Владимирович",
                            studentName = "Антон",
                            studentSubgroup = 0,
                            studentSurname = "Журомский",
                            studentUser = "20"
                        },
                        new
                        {
                            studentId = 14,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Константин",
                            studentSubgroup = 0,
                            studentSurname = "Захарчик",
                            studentUser = "21"
                        },
                        new
                        {
                            studentId = 15,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Иванов",
                            studentUser = "22"
                        },
                        new
                        {
                            studentId = 16,
                            studentGroup = 2,
                            studentLastname = "Леонидович",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Казачук",
                            studentUser = "23"
                        },
                        new
                        {
                            studentId = 17,
                            studentGroup = 2,
                            studentLastname = "Владимировна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Каначевская",
                            studentUser = "24"
                        },
                        new
                        {
                            studentId = 18,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Даниил",
                            studentSubgroup = 0,
                            studentSurname = "Кобрик",
                            studentUser = "25"
                        },
                        new
                        {
                            studentId = 19,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Сергей",
                            studentSubgroup = 0,
                            studentSurname = "Ковалев",
                            studentUser = "26"
                        },
                        new
                        {
                            studentId = 20,
                            studentGroup = 2,
                            studentLastname = "Святославович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Мятеж",
                            studentUser = "27"
                        },
                        new
                        {
                            studentId = 21,
                            studentGroup = 2,
                            studentLastname = "Игоревич",
                            studentName = "Евгений",
                            studentSubgroup = 0,
                            studentSurname = "Савельев",
                            studentUser = "28"
                        },
                        new
                        {
                            studentId = 22,
                            studentGroup = 2,
                            studentLastname = "Александрович",
                            studentName = "Егор",
                            studentSubgroup = 0,
                            studentSurname = "Селюн",
                            studentUser = "29"
                        },
                        new
                        {
                            studentId = 23,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Анастасия",
                            studentSubgroup = 0,
                            studentSurname = "Соломевич",
                            studentUser = "30"
                        },
                        new
                        {
                            studentId = 24,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Тимощенко",
                            studentUser = "31"
                        },
                        new
                        {
                            studentId = 25,
                            studentGroup = 2,
                            studentLastname = "Аркадьевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Турута",
                            studentUser = "32"
                        },
                        new
                        {
                            studentId = 26,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Кирилл",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "33"
                        },
                        new
                        {
                            studentId = 27,
                            studentGroup = 2,
                            studentLastname = "Дмитриевич",
                            studentName = "Максим",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "34"
                        },
                        new
                        {
                            studentId = 28,
                            studentGroup = 2,
                            studentLastname = "",
                            studentName = "Роман",
                            studentSubgroup = 0,
                            studentSurname = "Чэнь",
                            studentUser = "35"
                        },
                        new
                        {
                            studentId = 29,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Захар",
                            studentSubgroup = 0,
                            studentSurname = "Шибаков",
                            studentUser = "36"
                        },
                        new
                        {
                            studentId = 30,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Школьная",
                            studentUser = "37"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Subgroup", b =>
                {
                    b.Property<int>("subgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subgroupName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("subgroupId");

                    b.ToTable("subgroups");
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("subjectPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.HasKey("subjectId");

                    b.HasIndex("subjectPicture");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("teacherLastname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("teacherName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("teacherPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("teacherStatus")
                        .HasColumnType("int");

                    b.Property<string>("teacherSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("teacherUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId");

                    b.HasIndex("teacherStatus");

                    b.HasIndex("teacherUser");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            teacherId = 1,
                            teacherLastname = "Владимировна",
                            teacherName = "Валентина",
                            teacherSurname = "Тынкович",
                            teacherUser = "1"
                        },
                        new
                        {
                            teacherId = 2,
                            teacherLastname = "Александровна",
                            teacherName = "Екатерина",
                            teacherSurname = "Лазицкас",
                            teacherUser = "2"
                        },
                        new
                        {
                            teacherId = 3,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Терешко",
                            teacherUser = "5"
                        },
                        new
                        {
                            teacherId = 4,
                            teacherLastname = "Александрович",
                            teacherName = "Сергей",
                            teacherSurname = "Апанасевич",
                            teacherUser = "6"
                        },
                        new
                        {
                            teacherId = 5,
                            teacherLastname = "Валерьевна",
                            teacherName = "Дарья",
                            teacherSurname = "Карпович",
                            teacherUser = "7"
                        },
                        new
                        {
                            teacherId = 6,
                            teacherLastname = "Владимировна",
                            teacherName = "Анастасия",
                            teacherSurname = "Гордеюк",
                            teacherUser = "8"
                        },
                        new
                        {
                            teacherId = 7,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Виничук",
                            teacherUser = "38"
                        });
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("curatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("groupId");

                    b.HasIndex("curatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            groupId = 1,
                            curatorId = 6,
                            groupName = "8к2491"
                        },
                        new
                        {
                            groupId = 2,
                            curatorId = 2,
                            groupName = "8к2492"
                        },
                        new
                        {
                            groupId = 3,
                            curatorId = 5,
                            groupName = "8к2493"
                        });
                });

            modelBuilder.Entity("EDiary.Models.lessonType", b =>
                {
                    b.Property<int>("lessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("lessonTypeId");

                    b.ToTable("lessonType");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.Property<int>("setmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("setmarkId");

                    b.HasIndex("lessonId");

                    b.HasIndex("markId");

                    b.HasIndex("studentId");

                    b.ToTable("setMarks");
                });

            modelBuilder.Entity("EDiary.Models.subjectIcons", b =>
                {
                    b.Property<int>("subjectIconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("subjectPicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("subjectIconId");

                    b.ToTable("subjectIcons");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.Property<int>("tsubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("tsubjectId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("subjectTaughts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "946421a5-cd9f-41a3-af8f-3f7b2cafbb01",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "teacher",
                            ConcurrencyStamp = "ce83c900-f6a1-4136-b515-3e0f95bd25bc",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "student",
                            ConcurrencyStamp = "9378994e-74dc-4946-9824-d6a18e87def2",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "headman",
                            ConcurrencyStamp = "017dc60a-27d7-4fe6-8992-7f94afb59fcc",
                            Name = "headman",
                            NormalizedName = "HEADMAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fd45c11-bc66-405c-b186-d62f58e360fc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000001",
                            PasswordHash = "AQAAAAEAACcQAAAAELX70hx0rfuBq9HhwVbXUW3JBhUeF1qswz1T+z98pub4LlApKXOd7fK1f17l1DfGCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6650efb4-3378-4132-b0cf-81e1cbc36d57",
                            TwoFactorEnabled = false,
                            UserName = "tr000001"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7a3271c-21c0-4315-a4bf-45fcecad9c93",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUCziUqOoJXcUKdr0JdygdqOEnk4FPMKmOKu/2qyWS1N4H16rb/nAHqFgShDizglw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71fe283e-2b4c-4f1a-b4fc-8db1a96c66a6",
                            TwoFactorEnabled = false,
                            UserName = "tr000002"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1bf3364e-d8da-4f79-a804-742cefc5c751",
                            Email = "kuper2468@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEJn83y7Gfrcpgw1IkzB3hW8PFPotMb+012dry6EPJDmAwNOeQttW0EeMj5UwfBu7ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41f9bd3a-7a42-44a5-83e1-ab551a4cbb8c",
                            TwoFactorEnabled = false,
                            UserName = "st000001"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1729e8e9-5d31-47c8-bf2e-874b3d41a774",
                            Email = "valery.lipskaya03@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000002",
                            PasswordHash = "AQAAAAEAACcQAAAAELmCvAg48MNiITjGlpzZAPPWEF3JuqGK6V4NX6fQSK7KgOdXAUue+K24UQL4ALyDyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fce0417-06ef-4823-a894-5a61cdb83bcc",
                            TwoFactorEnabled = false,
                            UserName = "st000002"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0050372a-7973-4c90-9bf2-9b91acbc373e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGy5cAwff90rStWrX8PeksdgkIR5rUlyt0UMowaVp3u0FwHx564wRwJQckw+7zFk1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1859bb34-cb76-4979-8178-ad3fe95a3aa1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57b8c931-df21-4b64-8f08-629cceb7263d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPKuhKn06dCz7dm9OmoJShtbC5kBrQB9y5PcjiXSHTM8ILHFxEwbD2Yz/PjNORySA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13114cd4-13e7-4e3e-a7b7-039a250f07aa",
                            TwoFactorEnabled = false,
                            UserName = "tr000003"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cf3a4ac-6b5a-4646-adc4-f74eddcb1844",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEFu0Q5kUwzbwXPJEzooByWu5TzFjPaT0eN76HXwdf6ItcGZFx/qzh21RxZAqsxnkqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e52d7793-63d1-4645-96e0-27298bbe6040",
                            TwoFactorEnabled = false,
                            UserName = "tr000004"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdfc8c37-45f8-40b0-b62a-d8b6630569ec",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2ngbq9tXjsJykQQ6Z/cFoqK/wlACOl1RDvyj9DEcbdy2c4NOmQ1ZUrGLcZwNxTCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a723769f-7442-4848-88f6-6eb916133859",
                            TwoFactorEnabled = false,
                            UserName = "tr000005"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e1d1b07-2810-4e81-9f3e-78fe08e57249",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEC+vxT9j7uhbmVLlIDqMKBG/rxdWkivMTLOGu/DYUF5vne9eGO29gT8Wq6hMMMbA1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40edc61f-ba12-4884-aeb9-eef071b77878",
                            TwoFactorEnabled = false,
                            UserName = "tr000006"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7b1b96f-b0a2-4b9c-a460-409b883e1638",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6hUsU67L5cYndAis9TiDNQlZujPmPdW8QSuzTkEI8F7r9Pn8MZRJ8I/f5mXNFFSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a52aecf-b2f3-4a53-baf3-bf0f1d297578",
                            TwoFactorEnabled = false,
                            UserName = "st000003"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "598652c0-2625-4abb-98fc-6ebc62e7633b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcp0V7QW7vsO4/U91e30J3UX/gBqQi9N51lqKv9tS4Fd2hhLGAOxXi/ePmcp9oi4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6c48fe8-3e02-4fad-8d47-068d2789f58b",
                            TwoFactorEnabled = false,
                            UserName = "st000004"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ce1b528-7104-4c12-8894-1c43fa1eabee",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEGYupXW9U7bvlE1LShukFgLZo6Npe+XBRN3KknQpdSv+wvvlyfDRTM4B3yFnfBjHDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f82b314-b8ef-41be-b1fe-7bdde51e17e2",
                            TwoFactorEnabled = false,
                            UserName = "st000005"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "429dbb38-21d3-436a-ba0a-df193197b426",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEK+mvcisf2RoN5u3An9N6WDJGuEaOBTYzkp31dSQFyh68DlMVZZYaiX5LNPYtQyYdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ea90086-69df-4f17-92ea-e27a33a63b78",
                            TwoFactorEnabled = false,
                            UserName = "st000006"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6851139a-90a4-4367-8875-d67f4163c1b3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5pWq5Or+nCmW7d7wuVoq8ZFQNKQaZ/I7wmbQUKZBhpuoTTyjYg7nX+4R91CpGKdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbbbf87c-741b-45a6-8ea0-9803bf3aa945",
                            TwoFactorEnabled = false,
                            UserName = "st000007"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a445c9f1-b7fd-4e97-8dd7-b8299c0b0ffc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000008",
                            PasswordHash = "AQAAAAEAACcQAAAAEChbNiu6RoURi4kM/RIYy//Ec4gReFp1OCgPmmaSAtP2m2abaWHNNfyaQl+310HGXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87f2a0c8-4bba-47da-a6a1-fc6005c7e474",
                            TwoFactorEnabled = false,
                            UserName = "st000008"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ea21ddd-d498-4fbf-b9c5-e664bb11cca6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000009",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSuylB8S9AxXZeCfCERjuyu69FayBTR/mLuBVIjFdKbY1xrWYG7V2mdt9/5ZBtBPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a9c42c6-72a1-486e-9b67-4f445060a6c1",
                            TwoFactorEnabled = false,
                            UserName = "st000009"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80021f17-91c6-4987-bbbe-5aee81124dcc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000010",
                            PasswordHash = "AQAAAAEAACcQAAAAEM3VG6hau6JDRWYv7K3i7/OszAQN9/mWitOCwDxguPSvby3sidSdKC0E+Fl8pVCB5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "170618ea-b075-4b23-b767-396ab18fcab5",
                            TwoFactorEnabled = false,
                            UserName = "st000010"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca6cbea9-143d-40a6-b2e9-55ab6df05819",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000011",
                            PasswordHash = "AQAAAAEAACcQAAAAEAowVRL497nijfp3DOsJJPiJqcAWWT6pnZSfI0xS2AJFz32Av3bl+uWwvqMWc9/gSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddc9e5d0-7c0a-4b8e-8e9b-d1761702a89a",
                            TwoFactorEnabled = false,
                            UserName = "st000011"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3acc15a9-00af-483b-9bce-ddb2bb36d847",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000012",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsVMqRLz/9rGTaETvZoB8GRC2/Jcem1MNXHdp3Mvbdo/zEdbRe+6qMWyiGxn8r+Yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d071903-4193-458a-983a-c7cb0aa8ebb3",
                            TwoFactorEnabled = false,
                            UserName = "st000012"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "826e40f5-6dbb-41ab-8579-93d2f9ccb87c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000013",
                            PasswordHash = "AQAAAAEAACcQAAAAEAa1/KY+8kDGatJBL5V8+6JGgr2cqe7Un3iimlwaVf4Gk6fK/vms9yMjZmDoouJQjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adb1f78b-6e64-49b3-a3a6-77b35f02f69e",
                            TwoFactorEnabled = false,
                            UserName = "st000013"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cdb6523-ae83-45d1-ae51-1215e4de2d88",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000014",
                            PasswordHash = "AQAAAAEAACcQAAAAEDK2DV4q58MXIEW+3NV+EQVr6pehyfDkI2WXaZE+hMSUbSMgX8BKgWMKKtgzj1VtEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e5646df-29ff-4d16-a1cc-a72187fb24ea",
                            TwoFactorEnabled = false,
                            UserName = "st000014"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "304f5fb1-1799-4872-a27f-c36a7030d763",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000015",
                            PasswordHash = "AQAAAAEAACcQAAAAEKjkWWjF/9vVvusKgt+5OJCWiXGwNIe0AfAIk6tcRS87EjLHpuJ4V/KbPExV/JzKgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2505011a-adb5-4d79-a880-2cba1e9f9d9c",
                            TwoFactorEnabled = false,
                            UserName = "st000015"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "513ff1e8-e54e-47da-9788-5198c77588a9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000016",
                            PasswordHash = "AQAAAAEAACcQAAAAELNp7ykObISOsW6lRIrIsIpV70+NxPc/51BtT9pnocbLn0UhhBoslveyxNkZhpixAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3edbd9c1-cddd-44b4-a169-da720095f227",
                            TwoFactorEnabled = false,
                            UserName = "st000016"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07b3c384-3885-4155-adda-e7b9aacaf44b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000017",
                            PasswordHash = "AQAAAAEAACcQAAAAEP34Ok2BjQaQzjopz6NWlyV6euHIlkffb1HklwsF/ljpCpFQg1IL2h3zCBNMfvRVPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2309d002-c816-4901-aef1-28c60dfc0ca2",
                            TwoFactorEnabled = false,
                            UserName = "st000017"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cbb5136-ce82-4cbf-b821-964505b3a664",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000018",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUDSZbRTNfoxKkRBkLPgXdTnb4TrP4KaQ+9QDa7JwTAFGjUJ4x1bQiU+TAQuE/adg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c0d3201-a861-4a0a-8a91-a14504c5eb56",
                            TwoFactorEnabled = false,
                            UserName = "st000018"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325ce44b-4486-4e47-ad66-3e00cf2506d0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000019",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxXA+PsG1TziBfkst1efyxA7890hvneErBxGJZjUybo4uu6e0+yi33+qAxT7xvtMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dd67780-faaa-43ae-9508-7510771f17b4",
                            TwoFactorEnabled = false,
                            UserName = "st000019"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d98ece1d-b6f8-40d5-898f-9d460f17fef2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000020",
                            PasswordHash = "AQAAAAEAACcQAAAAEAsI1BZMgWvlZsiY7qbHCjZCQ3cc36GZy9YBabtz14YG10zf91QHwophDqdBB9ysMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3ababef-4d29-4fb7-bfc8-686ee920788c",
                            TwoFactorEnabled = false,
                            UserName = "st000020"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "314562fb-2a4b-4b2f-8dec-0fd535bb2471",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000021",
                            PasswordHash = "AQAAAAEAACcQAAAAEO8Cy/93rEK6ml32GUK2PcC0WMsIguAH+Tggy86D+xWXM8nHMjwYucpUZ2LqIG8YVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fa0c3a1-fbf8-4b23-a504-1d21e0aa6b35",
                            TwoFactorEnabled = false,
                            UserName = "st000021"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61bc883a-b724-492d-8e05-ed815ae400ed",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000022",
                            PasswordHash = "AQAAAAEAACcQAAAAEJb+WkakgHDVKp2B3noqGwscDbJMkwnH0ogftg21GDATquzxnfrxSyhILJjxPIvYNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56991f2f-a4c0-4695-8b64-6c7fabb79cfd",
                            TwoFactorEnabled = false,
                            UserName = "st000022"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e71e8cb-d274-4907-9485-99addf115708",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000023",
                            PasswordHash = "AQAAAAEAACcQAAAAEPN+rATbJR9rD2fh6GRaFMkMLO0YYlUnc27VbNsfmyl1jp7pxlj71vJj64xm5XeCNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62e9601a-cef0-467d-b708-d9815b6abfa6",
                            TwoFactorEnabled = false,
                            UserName = "st000023"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "285ddb13-6a94-4095-93d9-b05ba00b2810",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000024",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5kRdQFeFCJsi+va297V6lZ7pgXxVXBkhvxhAVvtxhKHv1eTZLZIyAfXvxM5qbIhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3efa8a4b-c1bb-424b-9b5d-0fbf5c7fc7bd",
                            TwoFactorEnabled = false,
                            UserName = "st000024"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d3c7834-9c4f-457e-ba30-9d57a1095f18",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000025",
                            PasswordHash = "AQAAAAEAACcQAAAAEHOfeSNfKwfB9U2KcbkBZI2euTKTSGEJBKkxOqlc8YKcm9B7dTeazlcycSeGB7clmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a3cfb30-1d9e-47a5-8877-b9e194aa50c6",
                            TwoFactorEnabled = false,
                            UserName = "st000025"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "407428c2-8726-4798-abd3-f564c6f82223",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000026",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjnT5506wSdlHvq1SH0yBw22o5kvr8Wx6XGxraY5hNG+FZIQ8BUwyBKxnPRpNN6ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72be757f-6e0f-41e4-a0ea-502e4014c5b8",
                            TwoFactorEnabled = false,
                            UserName = "st000026"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "373a07b9-e2ea-4d1a-bd45-1f0c446ea374",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000027",
                            PasswordHash = "AQAAAAEAACcQAAAAEDstspAn/Y/Do47twfs66ltF3+r8rAlzY8mpjKNml+MSA70pgzN0KZ98h0LTkf6LzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e49914b7-7b3f-43f1-ba0f-bc98d1be9abc",
                            TwoFactorEnabled = false,
                            UserName = "st000027"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "376f5a47-fe50-4b9e-88a3-adc5b29f8c43",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000028",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZpR5a05y4hJhm6798PqGv6agyNXSoxJoLpJgtz+Wc5Qmc63EsPiUT5uBsbC6QikQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84f64566-fb3a-4708-a52d-ad43c359a223",
                            TwoFactorEnabled = false,
                            UserName = "st000028"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc0a18e3-9889-452a-8497-ffc99e4b4f3f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000029",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5YuAaKGpJP5zYaCCSaAE5XrhgQLTAQp8hdJ2SNcRghvqo82pnVPzfS81wQJdztKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90f969aa-25c1-4466-9d12-4c13e15638b2",
                            TwoFactorEnabled = false,
                            UserName = "st000029"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdc11017-db55-4717-85ad-b5ecc5c98e43",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000030",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGJWSs8NHnveLJ9Eltfzi6WVM2hCUeNw2TyqwoaTTGfshFGA68j8xpoBQyO1NMIrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9478f0b-1b6c-44ca-b489-a21074b8ea7b",
                            TwoFactorEnabled = false,
                            UserName = "st000030"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf41fcd8-8f48-4365-980d-4f16165ae1dd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQoafdTmB7HgN0Hdcngbo/jEjPlUwUr5/Pvbcq4l295d2KSbrZ+jpRByBv2aUQoMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aadb15a9-62ea-4787-a7ff-291d3ef2ede6",
                            TwoFactorEnabled = false,
                            UserName = "tr000007"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("subgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "tsubject")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subgroup");

                    b.Navigation("teacher");

                    b.Navigation("tsubject");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.HasOne("EDiary.Models.lessonType", "lessType")
                        .WithMany()
                        .HasForeignKey("lessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "subjectTaught")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lessType");

                    b.Navigation("subjectTaught");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("studentGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("studentStatus");

                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("studentSubgroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("studentUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("status");

                    b.Navigation("subgroup");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.HasOne("EDiary.Models.subjectIcons", "Icon")
                        .WithMany()
                        .HasForeignKey("subjectPicture");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("teacherStatus");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("teacherUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("curatorId");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.HasOne("EDiary.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Mark", "mark")
                        .WithMany()
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("mark");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
