// <auto-generated />
using System;
using EDiary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDiary.Migrations
{
    [DbContext(typeof(EDContext))]
    [Migration("20220126064315_deletegrFromlabs")]
    partial class deletegrFromlabs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDiary.Models.EmojiStatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("emoji")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("statusId");

                    b.ToTable("emojiStatuses");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.Property<int>("labId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countLabs")
                        .HasColumnType("int");

                    b.Property<string>("labName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("subgroupId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("labId");

                    b.HasIndex("subgroupId");

                    b.HasIndex("teacherId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("labs");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("lessonId");

                    b.HasIndex("lessonTypeId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("EDiary.Models.Mark", b =>
                {
                    b.Property<int>("markId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("markId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentGroup")
                        .HasColumnType("int");

                    b.Property<string>("studentLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("studentPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("studentStatus")
                        .HasColumnType("int");

                    b.Property<int>("studentSubgroup")
                        .HasColumnType("int");

                    b.Property<string>("studentSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("studentId");

                    b.HasIndex("studentGroup");

                    b.HasIndex("studentStatus");

                    b.HasIndex("studentSubgroup");

                    b.HasIndex("studentUser");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Купреенко",
                            studentUser = "3"
                        },
                        new
                        {
                            studentId = 2,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Валерия",
                            studentSubgroup = 0,
                            studentSurname = "Липская",
                            studentUser = "9"
                        },
                        new
                        {
                            studentId = 3,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Анна",
                            studentSubgroup = 0,
                            studentSurname = "Бичевская",
                            studentUser = "10"
                        },
                        new
                        {
                            studentId = 4,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Матвей",
                            studentSubgroup = 0,
                            studentSurname = "Болтромеюк",
                            studentUser = "11"
                        },
                        new
                        {
                            studentId = 5,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Артем",
                            studentSubgroup = 0,
                            studentSurname = "Деревяго",
                            studentUser = "12"
                        },
                        new
                        {
                            studentId = 6,
                            studentGroup = 2,
                            studentLastname = "Николаевна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Барай",
                            studentUser = "13"
                        },
                        new
                        {
                            studentId = 7,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Николай",
                            studentSubgroup = 0,
                            studentSurname = "Беленович",
                            studentUser = "14"
                        },
                        new
                        {
                            studentId = 8,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Владимир",
                            studentSubgroup = 0,
                            studentSurname = "Валькович",
                            studentUser = "15"
                        },
                        new
                        {
                            studentId = 9,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Дарья",
                            studentSubgroup = 0,
                            studentSurname = "Войлокова",
                            studentUser = "16"
                        },
                        new
                        {
                            studentId = 10,
                            studentGroup = 2,
                            studentLastname = "Сергеевна",
                            studentName = "Екатерина",
                            studentSubgroup = 0,
                            studentSurname = "Воронина",
                            studentUser = "17"
                        },
                        new
                        {
                            studentId = 11,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Вусик",
                            studentUser = "18"
                        },
                        new
                        {
                            studentId = 12,
                            studentGroup = 2,
                            studentLastname = "Павлович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Глушков",
                            studentUser = "19"
                        },
                        new
                        {
                            studentId = 13,
                            studentGroup = 2,
                            studentLastname = "Владимирович",
                            studentName = "Антон",
                            studentSubgroup = 0,
                            studentSurname = "Журомский",
                            studentUser = "20"
                        },
                        new
                        {
                            studentId = 14,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Константин",
                            studentSubgroup = 0,
                            studentSurname = "Захарчик",
                            studentUser = "21"
                        },
                        new
                        {
                            studentId = 15,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Иванов",
                            studentUser = "22"
                        },
                        new
                        {
                            studentId = 16,
                            studentGroup = 2,
                            studentLastname = "Леонидович",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Казачук",
                            studentUser = "23"
                        },
                        new
                        {
                            studentId = 17,
                            studentGroup = 2,
                            studentLastname = "Владимировна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Каначевская",
                            studentUser = "24"
                        },
                        new
                        {
                            studentId = 18,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Даниил",
                            studentSubgroup = 0,
                            studentSurname = "Кобрик",
                            studentUser = "25"
                        },
                        new
                        {
                            studentId = 19,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Сергей",
                            studentSubgroup = 0,
                            studentSurname = "Ковалев",
                            studentUser = "26"
                        },
                        new
                        {
                            studentId = 20,
                            studentGroup = 2,
                            studentLastname = "Святославович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Мятеж",
                            studentUser = "27"
                        },
                        new
                        {
                            studentId = 21,
                            studentGroup = 2,
                            studentLastname = "Игоревич",
                            studentName = "Евгений",
                            studentSubgroup = 0,
                            studentSurname = "Савельев",
                            studentUser = "28"
                        },
                        new
                        {
                            studentId = 22,
                            studentGroup = 2,
                            studentLastname = "Александрович",
                            studentName = "Егор",
                            studentSubgroup = 0,
                            studentSurname = "Селюн",
                            studentUser = "29"
                        },
                        new
                        {
                            studentId = 23,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Анастасия",
                            studentSubgroup = 0,
                            studentSurname = "Соломевич",
                            studentUser = "30"
                        },
                        new
                        {
                            studentId = 24,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Тимощенко",
                            studentUser = "31"
                        },
                        new
                        {
                            studentId = 25,
                            studentGroup = 2,
                            studentLastname = "Аркадьевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Турута",
                            studentUser = "32"
                        },
                        new
                        {
                            studentId = 26,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Кирилл",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "33"
                        },
                        new
                        {
                            studentId = 27,
                            studentGroup = 2,
                            studentLastname = "Дмитриевич",
                            studentName = "Максим",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "34"
                        },
                        new
                        {
                            studentId = 28,
                            studentGroup = 2,
                            studentLastname = "",
                            studentName = "Роман",
                            studentSubgroup = 0,
                            studentSurname = "Чэнь",
                            studentUser = "35"
                        },
                        new
                        {
                            studentId = 29,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Захар",
                            studentSubgroup = 0,
                            studentSurname = "Шибаков",
                            studentUser = "36"
                        },
                        new
                        {
                            studentId = 30,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Школьная",
                            studentUser = "37"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Subgroup", b =>
                {
                    b.Property<int>("subgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subgroupName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("subgroupId");

                    b.ToTable("subgroups");
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("subjectPicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("subjectId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("teacherLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("teacherPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("teacherStatus")
                        .HasColumnType("int");

                    b.Property<string>("teacherSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId");

                    b.HasIndex("teacherStatus");

                    b.HasIndex("teacherUser");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            teacherId = 1,
                            teacherLastname = "Владимировна",
                            teacherName = "Валентина",
                            teacherSurname = "Тынкович",
                            teacherUser = "1"
                        },
                        new
                        {
                            teacherId = 2,
                            teacherLastname = "Александровна",
                            teacherName = "Екатерина",
                            teacherSurname = "Лазицкас",
                            teacherUser = "2"
                        },
                        new
                        {
                            teacherId = 3,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Терешко",
                            teacherUser = "5"
                        },
                        new
                        {
                            teacherId = 4,
                            teacherLastname = "Александрович",
                            teacherName = "Сергей",
                            teacherSurname = "Апанасевич",
                            teacherUser = "6"
                        },
                        new
                        {
                            teacherId = 5,
                            teacherLastname = "Валерьевна",
                            teacherName = "Дарья",
                            teacherSurname = "Карпович",
                            teacherUser = "7"
                        },
                        new
                        {
                            teacherId = 6,
                            teacherLastname = "Владимировна",
                            teacherName = "Анастасия",
                            teacherSurname = "Гордеюк",
                            teacherUser = "8"
                        },
                        new
                        {
                            teacherId = 7,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Виничук",
                            teacherUser = "38"
                        });
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("curatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("groupId");

                    b.HasIndex("curatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            groupId = 1,
                            curatorId = 6,
                            groupName = "8к2491"
                        },
                        new
                        {
                            groupId = 2,
                            curatorId = 2,
                            groupName = "8к2492"
                        },
                        new
                        {
                            groupId = 3,
                            curatorId = 5,
                            groupName = "8к2493"
                        });
                });

            modelBuilder.Entity("EDiary.Models.lessonType", b =>
                {
                    b.Property<int>("lessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("lessonTypeId");

                    b.ToTable("lessonType");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.Property<int>("setmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("setmarkId");

                    b.HasIndex("lessonId");

                    b.HasIndex("markId");

                    b.HasIndex("studentId");

                    b.ToTable("setMarks");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.Property<int>("tsubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("tsubjectId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("subjectTaughts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "47153319-0314-4445-8918-313421f976e9",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "teacher",
                            ConcurrencyStamp = "55c1bcc1-8b49-49bc-83a8-45605a8eb00a",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "student",
                            ConcurrencyStamp = "7fba2aae-5f7f-4a89-9ec5-4463ec9a3bb9",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "headman",
                            ConcurrencyStamp = "aa150e70-282c-4cc1-9e26-756fe267bc3c",
                            Name = "headman",
                            NormalizedName = "HEADMAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd607a1b-1128-4051-82ac-2e7b8bf7057a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEL46vyNN36ZngmdoZfUDgNHA2IvcLUnbI+CrbEX0JJm2XJeo78Cw/pSx6RUzw2ox0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3cf09e7c-efcc-45d8-9f72-c11e32a17543",
                            TwoFactorEnabled = false,
                            UserName = "tr000001"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fded133-1f8c-4237-8de9-5eb6fad8597e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000002",
                            PasswordHash = "AQAAAAEAACcQAAAAELGI/C8oW3qFBbPw6PnAvT3ChLgUJRC/S6e4RPelss6f15kDqFIbIEhVUqYwZb+Cww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bcb43ad-a9c9-4a4b-aa95-c9cfda7ec5f8",
                            TwoFactorEnabled = false,
                            UserName = "tr000002"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e2c7ae8-e544-4f5f-ac17-f1eed83b2963",
                            Email = "kuper2468@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJcXky4QVHuipwz0gc/Ax6urFCnoD4tW8V6+/0BUr3AZDkp5YmiVtPoQquiRdd0TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5d4914f-8db6-437f-94c5-7400c5c6b331",
                            TwoFactorEnabled = false,
                            UserName = "st000001"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f36b7e07-1fcd-42c7-b0fc-e620449a3230",
                            Email = "valery.lipskaya03@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEASn3vjDyquJQhUtBq04ordwwPtFNCBfzZwe07x3q8Iay240r/63SF3bdY3HrWppKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "515c0010-68ac-4c84-b39e-5a4c7350bdb4",
                            TwoFactorEnabled = false,
                            UserName = "st000002"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22949ed8-2b79-4b53-9c0b-e6c4f43735c8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxtCrg8q2ft2eKkxpHQ19fNf6+hpFIK8A+w3q8rpx/x8YoGdsrdlGtyPcgSDx3ASQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0be37f09-6dde-498f-a9c9-0060fe87381f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94f14733-d0ca-415d-b77f-b0a07bb18992",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZI0Cq9gU9PhudRYm2vWWqPYU9f5fCTnn3fmpdDfCA5GKca3GeWLCDV0Et2h/KeMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20859c5c-dc73-454e-ab7a-03f74a700b41",
                            TwoFactorEnabled = false,
                            UserName = "tr000003"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b3a23d6-24ce-46c9-a5ad-d3aa46ff3bdc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000004",
                            PasswordHash = "AQAAAAEAACcQAAAAELaeOOmZMTQycLyQOxH9FoiDaZ3lDkDEPrXlRSHp+vWs/4LQbDM36vUOqpXEAN1tUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b79b8240-1efb-4e2a-8575-d8dbda16ea96",
                            TwoFactorEnabled = false,
                            UserName = "tr000004"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d67b2a9-77c5-4fcc-92b5-5d615a916d84",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEOoQhJzrweIiSqFQLCPI+7DhNMD2mmWR8M0VFClNwmMb27miYFx3haa5eACP/F1dNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20b4bcd7-3ff6-4051-bf56-8ebbb87e0ef7",
                            TwoFactorEnabled = false,
                            UserName = "tr000005"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b56cdf22-9c34-4483-813b-d1398f223e5e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMXPdJQHHKaDWzd09klbSqtchx2+M0guLJjH7BLonmf/lwgpbKU5Uy5FMQdX/kRxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9029973b-78a0-4bd1-b142-5eefcfe11943",
                            TwoFactorEnabled = false,
                            UserName = "tr000006"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61c9d678-55bf-4b2b-936c-e483bf12dbe0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxEqcrQWNBuaL2OJHYFhiY4/WzFg39Y3xx5J1i6D2XLsXY5skSycW4KnCB7bGb2dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "236cb600-a01a-4f76-a842-9b5d189a2605",
                            TwoFactorEnabled = false,
                            UserName = "st000003"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1c0d705-7098-407a-a829-ed345c0b6d08",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000004",
                            PasswordHash = "AQAAAAEAACcQAAAAELgBIVrlZtqCLv7aXsbOnQCnrY7zuQOW8Xn0c0/7dpDGpPc1Em3qraOT/vUtvhFZIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b38e21c1-0e78-43a4-8851-428f5bc766a7",
                            TwoFactorEnabled = false,
                            UserName = "st000004"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cc2de88-1539-4e75-a18f-4bae19cd2447",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0sQqs/zG/SadaIY9QFxoNQmZzqjkLckIwV7XqgjeUB3Eo9kbyxpw3LzAF4wPsAmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96b74fa4-a7fc-421f-8d79-e0fb15fbf870",
                            TwoFactorEnabled = false,
                            UserName = "st000005"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22f64ce7-cab4-454a-8016-adaff243ebf9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEJh9tV2sSDD8zgds3/ZaFPhkLS9F/Rbtg7emFHlqZeqrDxiZ2su6BlVCeCNFgcYLvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd4038aa-7bd3-4000-a09e-e1ad478fe0c5",
                            TwoFactorEnabled = false,
                            UserName = "st000006"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b4ee0ea-4847-447a-b952-d7ae3b893395",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLffXVPpWv3Gg7ay8KGPEvobPtUzFFN9hrcd6xljdwoG87zynbzambBLNBZHIDd3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9668f4f9-7da0-4b84-b00d-6e7840f71c97",
                            TwoFactorEnabled = false,
                            UserName = "st000007"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df7cb92c-bfb3-4e4a-8e30-2b75a9a9f46c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000008",
                            PasswordHash = "AQAAAAEAACcQAAAAEEGaPZjuNBXOjnI+bdn5MA2viNF67hjd32b2RR+cp9STjJaX6lm9n2Pw340bJgmgqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0ebece2-daa9-4276-b5d1-0b9fdd3e9de6",
                            TwoFactorEnabled = false,
                            UserName = "st000008"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aef280c7-4b0a-46e2-a879-c3751783c780",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000009",
                            PasswordHash = "AQAAAAEAACcQAAAAEHf1oaPzYjXfgBBDP1MpX9z+gNBw/ISBIO9Zydic3zCFEkKDzhTRI9v7ixxzb6DdTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "247a2bca-b606-4f7d-a958-f2412fa8533f",
                            TwoFactorEnabled = false,
                            UserName = "st000009"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "321beddb-f503-44ed-9601-e9a0cb30ab59",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000010",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIhdRaM0kks072FKsnjCb2FGZTiYnUYIu860y52bbOlcM5E9kEs1G7Yz90yB6M5Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5d9c260-53b5-4824-9e94-acb84d61492d",
                            TwoFactorEnabled = false,
                            UserName = "st000010"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b6f90cf-c628-44e9-bd4a-64b763172dbc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000011",
                            PasswordHash = "AQAAAAEAACcQAAAAEExecnCPnOozVwOyeqKRSMo3Yb+i2VzFrVonzplBzDvzTrIvZqb/vRUKpAP3gPbCOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51e167b9-4815-4036-9727-453e9d6fc648",
                            TwoFactorEnabled = false,
                            UserName = "st000011"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dd04777-51dc-45ab-89e5-716b8ba00505",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000012",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDS3XowUejspdOwKMRBxVvlH9yzXfWpNA/4dVyHqnsFysrOJ77WKwmpxxnolqw6Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8903fca-e653-4aed-9ca9-907e87be0936",
                            TwoFactorEnabled = false,
                            UserName = "st000012"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1821932a-4811-4403-a418-eb96384ff9e8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000013",
                            PasswordHash = "AQAAAAEAACcQAAAAEBDYzOBrrfQmkhZwvY9w7kYz6+chb6VsYgHUAu1fz61KvGBBsUMuoK5CxECJAYim+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c50f056-9b30-4bbe-806a-30312a8c446e",
                            TwoFactorEnabled = false,
                            UserName = "st000013"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d612ae48-72f6-4028-bd68-07ba61777a1c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000014",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQn3XoA8+Znwg7ziTYGoAi8zv2Q+gGI//kNqlDMsMvMYvg3TEawZqPRLiwIqWs5xQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c197f4b8-99e7-466a-a9f1-4199203e3b00",
                            TwoFactorEnabled = false,
                            UserName = "st000014"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0d2d168-56c6-4ef4-9502-11a3ea0d6472",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000015",
                            PasswordHash = "AQAAAAEAACcQAAAAEL27q5wGJPeMG11N3lownhqywTcf/s7TzhXtt1uYWqrNitCMRdO0iTYYg5GZl3pN8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25e73d32-9c13-4b4e-969e-47dfbc04e11a",
                            TwoFactorEnabled = false,
                            UserName = "st000015"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9081db20-6ea4-473a-8fb5-ccbb801bdf18",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000016",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQhFwXysi4PZy8gpCrhbd38GhTGVgWlymEP7NgLiA0tnbmkA+C+Mnfyqcsyu3Yrfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19271f0b-d032-42df-9333-b985fc5b3931",
                            TwoFactorEnabled = false,
                            UserName = "st000016"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a76bac6e-918a-4ee3-9667-1c1ef887305d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000017",
                            PasswordHash = "AQAAAAEAACcQAAAAECyrHYuxKwpmbBDF6auLjl8LjQI0+IVSzBQi6ItpEQ6HJy71wPn4gEa1QT3p3p9NCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c7f42e3-b2b4-4314-a285-e8d3f300828b",
                            TwoFactorEnabled = false,
                            UserName = "st000017"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2a7a50d-325b-4bc8-8d45-ba2f5daf49bd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000018",
                            PasswordHash = "AQAAAAEAACcQAAAAEBCxZBqzI4j9t1Fe9VH6XHP8A0NZfZbb81qJHO99cqh55ko/G3mR9mvr8tUAaFw8JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a44989c5-7dc3-4502-afd8-543c81d0ea99",
                            TwoFactorEnabled = false,
                            UserName = "st000018"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0bfa97f-313b-48a6-82d1-72adf4af28f8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000019",
                            PasswordHash = "AQAAAAEAACcQAAAAENPJ5yAc7apyo4TQEmywZPZHKheEzRVkRyJshdDxDC7i/mECvmegKnm9CEZv+bOg4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d19ae507-61be-4e4f-83ea-8f24be98c19d",
                            TwoFactorEnabled = false,
                            UserName = "st000019"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "422e79c8-4c62-4dc1-b415-5e8a4b4e0c95",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000020",
                            PasswordHash = "AQAAAAEAACcQAAAAEA9tY8JJpqtG8zzJTQ9nqwmXzZ92B9SqoO2T+AtZBcXOQ7BJtVtnRk/7+Ff7vyp3RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b04209d-4610-4e8e-8e39-c3187ed5d358",
                            TwoFactorEnabled = false,
                            UserName = "st000020"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bede556-c28d-438d-b636-e9f8bfd7e075",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000021",
                            PasswordHash = "AQAAAAEAACcQAAAAEJNNJxysGJ93e+FtPKPL+psiBgqRaUyxGRz24QQrUS9Qi6WMl3A/gEH1LmSQ3cuu4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ceff5168-a423-46bd-97c5-7de94df5fe63",
                            TwoFactorEnabled = false,
                            UserName = "st000021"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92859675-306f-4b7c-b9b1-2af754e454cf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000022",
                            PasswordHash = "AQAAAAEAACcQAAAAEE5Z24iyNB9K0pG4JmcrV4vJ7bKCHhmnxWWMjKCWwc4V/juJhJndC7M/w2ZXlWXJyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2aaa569-c713-41ec-ab22-6d68c0cd6894",
                            TwoFactorEnabled = false,
                            UserName = "st000022"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49b16feb-7bbb-40ff-85ae-7f37e389ab16",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000023",
                            PasswordHash = "AQAAAAEAACcQAAAAELbv99mYds3xoaO/A8Bx/nmOoGBk++yT+gvutyWHdqi7ov5HGrd7tZwkjQlGaX8+EA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95d74afe-0d49-4465-88d2-619e3ef28010",
                            TwoFactorEnabled = false,
                            UserName = "st000023"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9073881c-36e1-48a3-af8e-28c6a2e830b2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000024",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNYd04p74d4NOWm4ssdWZ2Wli/GPjH+c+z/pJvUDGnb8vasbt9BgM+UAXkzB6rQzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22d860fc-a997-4ee0-91de-c0b59773add1",
                            TwoFactorEnabled = false,
                            UserName = "st000024"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bda0397-fad9-4042-8ee1-24920826bf85",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000025",
                            PasswordHash = "AQAAAAEAACcQAAAAEDpa1QmhbocLYPffCb+1cArNykt56B/3xfX8e2m6E1KlXGTk336xIFGGh0NrDeLslw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22454e10-9d2e-42dc-8fc8-46bf7cce19db",
                            TwoFactorEnabled = false,
                            UserName = "st000025"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24495630-fc90-4666-86f9-8dba9003ecff",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000026",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMo4aJRBgANini7+s45JfBm4OQnF6LO3Z25HbeqkgYLn8UfNMOEnfFgm347MnJ8Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78c3a0ff-2aa9-40b9-8468-03696a82fa40",
                            TwoFactorEnabled = false,
                            UserName = "st000026"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3b47bb0-93f6-4d8e-bc7f-923ff7a79c5d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000027",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpiP4Qr6LKrfVGxLY7VQgr9eXqCHZMO5M1LCp5sKK1/MMjk7zhQE1KV5wjV5wh6DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c773435-6e8e-428b-a57d-61ecbf7a999c",
                            TwoFactorEnabled = false,
                            UserName = "st000027"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61d8eb09-439c-4141-8f08-8eddc07ce7a1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000028",
                            PasswordHash = "AQAAAAEAACcQAAAAEIHq2Nh83gT+TjPhqXxbdRmtGDBDgOKIRXAx9yEWV3CQ4wqhTXP8os7rSEmjSuyDRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae07a42d-e6b4-4da7-bf8c-f27d5f5f5b7b",
                            TwoFactorEnabled = false,
                            UserName = "st000028"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d169cf94-3e41-4d03-b7fd-5d2525dc73c0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000029",
                            PasswordHash = "AQAAAAEAACcQAAAAEAc0VFRPVhozBFcsQ8rP1SF/KU0FpmCPhqHPXIJ9ltsnVtt193y9YIPqT9d10w7wig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8449082a-0072-427c-b8ca-dc467c83d184",
                            TwoFactorEnabled = false,
                            UserName = "st000029"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28bdbf2b-0036-410c-8a8c-b503f55ad455",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000030",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhYdvJNTZKCcfp6lXlHdCHSVFkROkp0c2c6hBtfJUn2tVpb6aD0bBsgCsSPFwwFmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "719971d7-3053-47ea-9a10-b503c6fc1f56",
                            TwoFactorEnabled = false,
                            UserName = "st000030"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60947c16-ef59-4ae3-875e-56834727d343",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEAyf6YkFuNegVSEI3BY2FzqsZjSYTTG/tLP4ewmyJB3hjGtEbAWE848+EovAmJOrDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1de84e1-9858-4a68-b0f7-0171a3714576",
                            TwoFactorEnabled = false,
                            UserName = "tr000007"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("subgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "tsubject")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subgroup");

                    b.Navigation("teacher");

                    b.Navigation("tsubject");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.HasOne("EDiary.Models.lessonType", "lessType")
                        .WithMany()
                        .HasForeignKey("lessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "subjectTaught")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lessType");

                    b.Navigation("subjectTaught");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("studentGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("studentStatus");

                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("studentSubgroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("studentUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("status");

                    b.Navigation("subgroup");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("teacherStatus");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("teacherUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("curatorId");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.HasOne("EDiary.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Mark", "mark")
                        .WithMany()
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("mark");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
