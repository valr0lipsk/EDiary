// <auto-generated />
using System;
using EDiary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDiary.Migrations
{
    [DbContext(typeof(EDContext))]
    [Migration("20220129174200_size")]
    partial class size
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDiary.Models.EmojiStatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("emoji")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("statusId");

                    b.ToTable("emojiStatuses");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.Property<int>("labId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countLabs")
                        .HasColumnType("int");

                    b.Property<string>("labName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("subgroupId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("labId");

                    b.HasIndex("subgroupId");

                    b.HasIndex("teacherId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("labs");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("lessonId");

                    b.HasIndex("lessonTypeId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("EDiary.Models.Mark", b =>
                {
                    b.Property<int>("markId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("markId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentGroup")
                        .HasColumnType("int");

                    b.Property<string>("studentLastname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("studentPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("studentStatus")
                        .HasColumnType("int");

                    b.Property<int>("studentSubgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("studentSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("studentUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("studentId");

                    b.HasIndex("studentGroup");

                    b.HasIndex("studentStatus");

                    b.HasIndex("studentSubgroup");

                    b.HasIndex("studentUser");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Купреенко",
                            studentUser = "3"
                        },
                        new
                        {
                            studentId = 2,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Валерия",
                            studentSubgroup = 0,
                            studentSurname = "Липская",
                            studentUser = "9"
                        },
                        new
                        {
                            studentId = 3,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Анна",
                            studentSubgroup = 0,
                            studentSurname = "Бичевская",
                            studentUser = "10"
                        },
                        new
                        {
                            studentId = 4,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Матвей",
                            studentSubgroup = 0,
                            studentSurname = "Болтромеюк",
                            studentUser = "11"
                        },
                        new
                        {
                            studentId = 5,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Артем",
                            studentSubgroup = 0,
                            studentSurname = "Деревяго",
                            studentUser = "12"
                        },
                        new
                        {
                            studentId = 6,
                            studentGroup = 2,
                            studentLastname = "Николаевна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Барай",
                            studentUser = "13"
                        },
                        new
                        {
                            studentId = 7,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Николай",
                            studentSubgroup = 0,
                            studentSurname = "Беленович",
                            studentUser = "14"
                        },
                        new
                        {
                            studentId = 8,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Владимир",
                            studentSubgroup = 0,
                            studentSurname = "Валькович",
                            studentUser = "15"
                        },
                        new
                        {
                            studentId = 9,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Дарья",
                            studentSubgroup = 0,
                            studentSurname = "Войлокова",
                            studentUser = "16"
                        },
                        new
                        {
                            studentId = 10,
                            studentGroup = 2,
                            studentLastname = "Сергеевна",
                            studentName = "Екатерина",
                            studentSubgroup = 0,
                            studentSurname = "Воронина",
                            studentUser = "17"
                        },
                        new
                        {
                            studentId = 11,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Александр",
                            studentSubgroup = 0,
                            studentSurname = "Вусик",
                            studentUser = "18"
                        },
                        new
                        {
                            studentId = 12,
                            studentGroup = 2,
                            studentLastname = "Павлович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Глушков",
                            studentUser = "19"
                        },
                        new
                        {
                            studentId = 13,
                            studentGroup = 2,
                            studentLastname = "Владимирович",
                            studentName = "Антон",
                            studentSubgroup = 0,
                            studentSurname = "Журомский",
                            studentUser = "20"
                        },
                        new
                        {
                            studentId = 14,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Константин",
                            studentSubgroup = 0,
                            studentSurname = "Захарчик",
                            studentUser = "21"
                        },
                        new
                        {
                            studentId = 15,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Иванов",
                            studentUser = "22"
                        },
                        new
                        {
                            studentId = 16,
                            studentGroup = 2,
                            studentLastname = "Леонидович",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Казачук",
                            studentUser = "23"
                        },
                        new
                        {
                            studentId = 17,
                            studentGroup = 2,
                            studentLastname = "Владимировна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Каначевская",
                            studentUser = "24"
                        },
                        new
                        {
                            studentId = 18,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Даниил",
                            studentSubgroup = 0,
                            studentSurname = "Кобрик",
                            studentUser = "25"
                        },
                        new
                        {
                            studentId = 19,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Сергей",
                            studentSubgroup = 0,
                            studentSurname = "Ковалев",
                            studentUser = "26"
                        },
                        new
                        {
                            studentId = 20,
                            studentGroup = 2,
                            studentLastname = "Святославович",
                            studentName = "Иван",
                            studentSubgroup = 0,
                            studentSurname = "Мятеж",
                            studentUser = "27"
                        },
                        new
                        {
                            studentId = 21,
                            studentGroup = 2,
                            studentLastname = "Игоревич",
                            studentName = "Евгений",
                            studentSubgroup = 0,
                            studentSurname = "Савельев",
                            studentUser = "28"
                        },
                        new
                        {
                            studentId = 22,
                            studentGroup = 2,
                            studentLastname = "Александрович",
                            studentName = "Егор",
                            studentSubgroup = 0,
                            studentSurname = "Селюн",
                            studentUser = "29"
                        },
                        new
                        {
                            studentId = 23,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Анастасия",
                            studentSubgroup = 0,
                            studentSurname = "Соломевич",
                            studentUser = "30"
                        },
                        new
                        {
                            studentId = 24,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Мария",
                            studentSubgroup = 0,
                            studentSurname = "Тимощенко",
                            studentUser = "31"
                        },
                        new
                        {
                            studentId = 25,
                            studentGroup = 2,
                            studentLastname = "Аркадьевич",
                            studentName = "Никита",
                            studentSubgroup = 0,
                            studentSurname = "Турута",
                            studentUser = "32"
                        },
                        new
                        {
                            studentId = 26,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Кирилл",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "33"
                        },
                        new
                        {
                            studentId = 27,
                            studentGroup = 2,
                            studentLastname = "Дмитриевич",
                            studentName = "Максим",
                            studentSubgroup = 0,
                            studentSurname = "Францкевич",
                            studentUser = "34"
                        },
                        new
                        {
                            studentId = 28,
                            studentGroup = 2,
                            studentLastname = "",
                            studentName = "Роман",
                            studentSubgroup = 0,
                            studentSurname = "Чэнь",
                            studentUser = "35"
                        },
                        new
                        {
                            studentId = 29,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Захар",
                            studentSubgroup = 0,
                            studentSurname = "Шибаков",
                            studentUser = "36"
                        },
                        new
                        {
                            studentId = 30,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Ксения",
                            studentSubgroup = 0,
                            studentSurname = "Школьная",
                            studentUser = "37"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Subgroup", b =>
                {
                    b.Property<int>("subgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subgroupName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("subgroupId");

                    b.ToTable("subgroups");
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("subjectPicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("subjectId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("teacherLastname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("teacherName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("teacherPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("teacherStatus")
                        .HasColumnType("int");

                    b.Property<string>("teacherSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("teacherUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId");

                    b.HasIndex("teacherStatus");

                    b.HasIndex("teacherUser");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            teacherId = 1,
                            teacherLastname = "Владимировна",
                            teacherName = "Валентина",
                            teacherSurname = "Тынкович",
                            teacherUser = "1"
                        },
                        new
                        {
                            teacherId = 2,
                            teacherLastname = "Александровна",
                            teacherName = "Екатерина",
                            teacherSurname = "Лазицкас",
                            teacherUser = "2"
                        },
                        new
                        {
                            teacherId = 3,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Терешко",
                            teacherUser = "5"
                        },
                        new
                        {
                            teacherId = 4,
                            teacherLastname = "Александрович",
                            teacherName = "Сергей",
                            teacherSurname = "Апанасевич",
                            teacherUser = "6"
                        },
                        new
                        {
                            teacherId = 5,
                            teacherLastname = "Валерьевна",
                            teacherName = "Дарья",
                            teacherSurname = "Карпович",
                            teacherUser = "7"
                        },
                        new
                        {
                            teacherId = 6,
                            teacherLastname = "Владимировна",
                            teacherName = "Анастасия",
                            teacherSurname = "Гордеюк",
                            teacherUser = "8"
                        },
                        new
                        {
                            teacherId = 7,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherSurname = "Виничук",
                            teacherUser = "38"
                        });
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("curatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("groupId");

                    b.HasIndex("curatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            groupId = 1,
                            curatorId = 6,
                            groupName = "8к2491"
                        },
                        new
                        {
                            groupId = 2,
                            curatorId = 2,
                            groupName = "8к2492"
                        },
                        new
                        {
                            groupId = 3,
                            curatorId = 5,
                            groupName = "8к2493"
                        });
                });

            modelBuilder.Entity("EDiary.Models.lessonType", b =>
                {
                    b.Property<int>("lessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("lessonTypeId");

                    b.ToTable("lessonType");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.Property<int>("setmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("setmarkId");

                    b.HasIndex("lessonId");

                    b.HasIndex("markId");

                    b.HasIndex("studentId");

                    b.ToTable("setMarks");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.Property<int>("tsubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("tsubjectId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("subjectTaughts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "60bb0bf3-2673-414e-ac51-05709d3f1f62",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "teacher",
                            ConcurrencyStamp = "8f02e6e2-e9a6-4559-bb52-53d92f91fabb",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "student",
                            ConcurrencyStamp = "5fe659a4-c8ab-44f3-a087-f01efce6ca8b",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "headman",
                            ConcurrencyStamp = "a3c0503d-8aba-4a7b-8be5-4e3151435793",
                            Name = "headman",
                            NormalizedName = "HEADMAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c2eee21-92f0-4e36-b105-0231ca462a22",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEO0ZW2xRL6xNjzGoiIkjCHenGqKWZf3epZOduQh8Ae8JlhMhomxPsRW1nsmgBJejFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "110e86fa-8e48-4939-92be-c5108c6da2d4",
                            TwoFactorEnabled = false,
                            UserName = "tr000001"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b468dbb-5014-4423-98e0-b9bd52bc2b83",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjiilDullZwWUqbn7IqYJaVRZryJvWQvCNRmk6DH5Ih06u5cx7fWeeHXVkv3Riw4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "452175a3-6177-40b0-a186-84bd6eb6814a",
                            TwoFactorEnabled = false,
                            UserName = "tr000002"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5508e232-f23d-4d5c-b996-6e264ae7f58c",
                            Email = "kuper2468@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000001",
                            PasswordHash = "AQAAAAEAACcQAAAAELl3IHkCfF7EdNCFNEnCBPsMoKkdD0hkstT6+KkrJD3yKcPO7ulKZRLfSAc4A2qyqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f2e9eb6-8674-4459-98ea-e8079e70a18b",
                            TwoFactorEnabled = false,
                            UserName = "st000001"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d88a4b3b-966e-44db-8be9-653fa9ce2925",
                            Email = "valery.lipskaya03@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcsBolXKb4lwfoBd9Qc6a0HNYGZVCNOMTQyKdgEtAx/j6/1qEzpjP5HVEavxr0M7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45be5e01-48f7-4d31-a961-a14a4429f49d",
                            TwoFactorEnabled = false,
                            UserName = "st000002"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fcc3ff3-85f6-42a1-b016-35fa238b1458",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEesbBGlQYQRJO2c2F2fdnIBVmZdVh32BYcFKXY2EBbzibFaDWXlITgrFWhawk7gHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d753367c-5e07-4d2b-b90e-d3d4bd883c4c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a077bc9e-6376-4d9f-b343-a86647cfaa20",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaUwEILZAwH4+AdBpTDb+Se5DPeKQ942O2VO+WgL5FLEASdK4SGBMIdCRsDVSlQnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "643c59f1-26ba-41db-a873-e556863f1b0c",
                            TwoFactorEnabled = false,
                            UserName = "tr000003"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d32f7aeb-1a90-4d12-af09-2342a17cb656",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnGbOTfRha4N3r1LwlzpN7ii6eF8+obGTjJidW/qFktxJLirCrdcvzMtLVp+iGElQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d61c0875-26ae-4ccb-9fec-fabd7b0fceb8",
                            TwoFactorEnabled = false,
                            UserName = "tr000004"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83d11c55-bb73-43dc-bbf7-52cea3c4b27d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEJX/q0D+zE59qaLS1nnGtE72crVQ1gPbh8CQNm8Y4IA8Zs4rZFi5vAlzZsv58MDSbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "571b7426-7586-4a04-b580-3148326853b3",
                            TwoFactorEnabled = false,
                            UserName = "tr000005"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "567b2e9e-504e-4502-b9fa-35a0c6111902",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEDt/BSDd6t/BKhOaJhPNXkScycA575dv1HdMwpZ6acpnpMGmi6Ang802zQTq7i7B6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df3e1a52-09c9-47dc-a4b5-02516e154e4f",
                            TwoFactorEnabled = false,
                            UserName = "tr000006"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c108778-1070-48f1-872e-b2af46a50d8d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEG8x+wuUfkE7BM4gyV480mPT0TnVytaFyx/IRQdXt0RYj6BJHf1dVBLnimhVlXY3dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce030dc-751a-467b-83dd-06a5ed19d6f6",
                            TwoFactorEnabled = false,
                            UserName = "st000003"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a869047-ef55-4de1-9192-f7038004efdf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEJg7I9s4wWNB5aZuZgt04Ce4/c2lDy4HIwQ5OdLfiyoNNDJSMyI2Pm9wlMHYfW5q5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3440e9b4-fa17-482d-a29b-0bfcbac1864e",
                            TwoFactorEnabled = false,
                            UserName = "st000004"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bee6f5ce-d24c-4a2e-83b6-2945dacb0ae8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEDsaYJyrpgjkGDh19MpFQqvJkywt7STIcKtlvINqzHFrP9h7ko1WI3/TX7hVpgoOgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9110813-1a35-4376-b5f6-9e07568d8a05",
                            TwoFactorEnabled = false,
                            UserName = "st000005"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b289c0e5-3c30-4d3d-8905-ddffd653beb6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/LRVmE3zyrx+ozaFZvQ9DZVz1axGfetMClnU0JX98524SaH6ac/oO15NBb70u8AA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75109aac-d9aa-426d-ac4b-17a6217fed35",
                            TwoFactorEnabled = false,
                            UserName = "st000006"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5759631a-b7f0-49d7-a191-f98cef426cda",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEPOIk9RaCSXbr3h3+wVJMbf4OxZfNlaxdo4wEVWIxtK5PpJxKyKkZQ8QERFv5DWg9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fc97e49-8b79-44b4-a3aa-0ab3d53b853a",
                            TwoFactorEnabled = false,
                            UserName = "st000007"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa56b545-c363-4e5e-85b5-682d04927976",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000008",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6Hd+++CzvBdOZFCcXIF8OeM0/8KUL+3d1/qP7xl4qZFtIC1pmZQjEzN28VCkTm8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "715dc74f-3581-472e-9e1d-118f7396cffb",
                            TwoFactorEnabled = false,
                            UserName = "st000008"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a750a9fb-b077-467d-bd9f-7cae46fe9151",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000009",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZiItQyu9cecoBCsTWJERN336MW48D6FdnRKU+koGkrN0MMc4LHGil3EF4cfvAhqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0161c75a-0173-4e3e-8b63-8dfabd259820",
                            TwoFactorEnabled = false,
                            UserName = "st000009"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1a68b20-0eec-41fe-9d86-dc3deb8d261b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000010",
                            PasswordHash = "AQAAAAEAACcQAAAAEDXNI7tV/YRRRdefKpa7tQd9DsBPhE2+mKF+VwAgPu9rkUFbq57sosqKGjoHswUY8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "453e8551-4029-44d8-b79c-1edef7c1a2fa",
                            TwoFactorEnabled = false,
                            UserName = "st000010"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97761c33-856f-4376-a57f-620ceb932d74",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000011",
                            PasswordHash = "AQAAAAEAACcQAAAAEH6sqERWxf1ml7kkIT9JQ3Bw7YNMTSsCHBf2mqu05ufEVNaMyEgbwYHWWUv75JTzoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "540c5c50-bd44-4caf-92dd-3910523c9e90",
                            TwoFactorEnabled = false,
                            UserName = "st000011"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "703e6656-ead5-430f-9468-2bde04c23e12",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000012",
                            PasswordHash = "AQAAAAEAACcQAAAAEGopdbayFMr9zaWe+kxOBMt6BPufG+sMOHrkiGRzc/qGFZSFYo5QNBhuqP5n2f/AiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "232b56fe-1de9-47bf-9028-80c86424d66d",
                            TwoFactorEnabled = false,
                            UserName = "st000012"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "907c3253-805b-4640-a12f-7d0b857994f8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000013",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXh5ffQn4hhY8rrHPfn+VBuw4AoiUlvqrgCEeByL4Af0rs0e7mji3bvrTIOunrqkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c6c9c75-c5f1-4398-972b-592c44c89d21",
                            TwoFactorEnabled = false,
                            UserName = "st000013"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffc3f4a8-a35f-4293-b13b-1fe7cc708386",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000014",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGUvha5jlmTI7Sr1zHkzvB2zQR3DivyMX2fMTZ8ddr7eXNNFifgaoEeAY5EzAw0UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "484ba2ab-b711-49de-a423-5cab25a69983",
                            TwoFactorEnabled = false,
                            UserName = "st000014"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2ecd7cb-9c2c-4d44-8fb2-ca75d1785ae6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000015",
                            PasswordHash = "AQAAAAEAACcQAAAAEI6eG0DHxCxc7rpmk7pCNrxPRAwcekiUvRLOBky/BHRMkoIrS4wnYesjLKQQ0tfbhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b998170f-8b7f-4bbb-af02-5acf186c4bde",
                            TwoFactorEnabled = false,
                            UserName = "st000015"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eda1e7da-fe7e-40eb-a1e5-b2be383e620e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000016",
                            PasswordHash = "AQAAAAEAACcQAAAAECTKGh/e4d3VzcTkaUnZOKScdSpclFJaSvDwDrFZJZW6L9dCB07PNF6r04gkgepo4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38c0aaa6-da0d-4f15-9c8a-cf3869b1bef0",
                            TwoFactorEnabled = false,
                            UserName = "st000016"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58a43ed9-4807-45c9-a132-1cfdedc981a2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000017",
                            PasswordHash = "AQAAAAEAACcQAAAAEKfsNFt7KcL3ShMDZ4PYJ+2j1PB1Ha0o6gpgJX+xj5DmdS73YAb350mAbRvgiiqzyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b63e2c6-5c70-4b38-a285-81140e6e46cc",
                            TwoFactorEnabled = false,
                            UserName = "st000017"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c564612a-d715-4a54-931f-d817f2ea8d0d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000018",
                            PasswordHash = "AQAAAAEAACcQAAAAEFuyTyH9p6c1rjhtG8IbmJtoWbOLAlPkexttT6qneCDwan4Qydd2XbRdyrM6z0RCNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2865a01b-9766-45bc-ba77-aa9a2d142c8e",
                            TwoFactorEnabled = false,
                            UserName = "st000018"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "458a2829-3f33-423a-82b6-638054d85dcd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000019",
                            PasswordHash = "AQAAAAEAACcQAAAAEAmnZFN3asc1EKOl+JneRtSvbaw1ffS/zUa4ApTXIAgcI8v3ZnDHSp/12DhnXDp1Gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "369c065b-aab6-4353-b7c9-673ebb3e2153",
                            TwoFactorEnabled = false,
                            UserName = "st000019"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ead9912-78bf-4ca7-9a6d-ef466abd43e2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000020",
                            PasswordHash = "AQAAAAEAACcQAAAAEMp4sc70F53T4DS1isGEBpNAd6PaKbTE50L/HLGIppRqnzmSmzhyinWzgZr2lcoAsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6871c6a-d061-4df7-9da8-8db7287407a7",
                            TwoFactorEnabled = false,
                            UserName = "st000020"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc37e28-79d6-40ee-b5c4-d54782ae85d8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000021",
                            PasswordHash = "AQAAAAEAACcQAAAAEHCBO0zGkW9fXE82WPKyggNmKbRgbHgLdeVL0VqPSuKnYMRyiq7WlvF3EYOdX0LrCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcfdb17d-b907-463c-ac93-39b528471709",
                            TwoFactorEnabled = false,
                            UserName = "st000021"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2523a446-adbc-4eda-bf30-189b7478dc79",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000022",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMlWd+/tfwpyqB7N+m2D192vH61+ZhFZ+96Hbcry1S3XdGc5PeIjI/gAzMpMM8geg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c168aa6d-e0a3-4e28-a79a-092f4f36d8a5",
                            TwoFactorEnabled = false,
                            UserName = "st000022"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2703dc29-015c-41ad-ac79-0b9d411c8ee2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000023",
                            PasswordHash = "AQAAAAEAACcQAAAAEEPptxXR7QwSMjvH5pWROj1tFrHApGE2CIVNv1F7XjbXfdi87RouzdRXz44qoWsNRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "439c11de-2ddc-4d43-8603-7cefcbc85e4e",
                            TwoFactorEnabled = false,
                            UserName = "st000023"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02baf344-ccf5-4655-b143-7bad845f7668",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000024",
                            PasswordHash = "AQAAAAEAACcQAAAAEOS+VnqK8G6NU0K+QIgCBN9UnTPsMMXBJM118RSxLCftmOD1Cbwshg7SticEXzLlHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e54f0d4f-d341-4555-b0d2-7e23df4c6197",
                            TwoFactorEnabled = false,
                            UserName = "st000024"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a79bc2b0-8519-4af0-9acf-287bf1adee0b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000025",
                            PasswordHash = "AQAAAAEAACcQAAAAEAAjtuMzHao0p/B5HSfCcvQ13JatqFEwEw701JHzStr9yNNsMGCFhZxbtIa80P8vIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55230c5e-e98b-4a9b-9e94-b5a8b2a00d79",
                            TwoFactorEnabled = false,
                            UserName = "st000025"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eaa89fd-2bc9-48c5-8faa-8a1ef982e8ab",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000026",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/lU9NuyBmU7F37onxGgjTrvgCIw5oP3PAXqhHuDzHvPS6K8arYIqK0RMuqeohUQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b7930ba-5cbe-4380-98e3-e6dafade49e1",
                            TwoFactorEnabled = false,
                            UserName = "st000026"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d279257e-73f3-434d-a76c-2feef644f453",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000027",
                            PasswordHash = "AQAAAAEAACcQAAAAEO8qJLcCkGUnqHCJwoOhagOxwvvZvud+cKjSOWtGB5ytJFBRyqAzsvsq3tbWEl/A9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7252b574-537c-4069-8acf-45add7c240f5",
                            TwoFactorEnabled = false,
                            UserName = "st000027"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e991fd7c-5bd5-4563-a8e2-3a24ea711430",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000028",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKoeJQbiUVW4Y/o7y2KVHNZY/Vtv4sEAuRUMwQETNGa7yqIz24/ztMpHJTJzLwW6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4763a06-d906-4101-87f4-374989c46415",
                            TwoFactorEnabled = false,
                            UserName = "st000028"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de39241f-7167-4e74-82d6-6bdf78858b48",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000029",
                            PasswordHash = "AQAAAAEAACcQAAAAEH+I9APxpGJhpiqfEt9slFkRJze9nuyBNhGNGb0JCTb0CaJnk9xypNG6g5uPX6L59A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68c497d6-6b67-45f1-af5d-d7a3cb530d74",
                            TwoFactorEnabled = false,
                            UserName = "st000029"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf9cbde1-21ad-4c36-88e1-f91c68799fdc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000030",
                            PasswordHash = "AQAAAAEAACcQAAAAEP0Xa7ehyDJ/JEUNvyYTxrNNvSGCaNCmcUkqSDlGgP07EORLp6LlQwJacIrhz7YdBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa459af5-137a-4820-b899-fa84085da2de",
                            TwoFactorEnabled = false,
                            UserName = "st000030"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdc5158a-2141-4a54-8de5-c91916a66a27",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000007",
                            PasswordHash = "AQAAAAEAACcQAAAAELWxmxrkYMEWB27ojWi85PuOSPliUep9KtqVmHmdYhDIqv7WlqGTvNOs2HuZ4MPdKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2615f9d5-a12b-4553-b3ae-0c60f4c6250f",
                            TwoFactorEnabled = false,
                            UserName = "tr000007"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("subgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "tsubject")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subgroup");

                    b.Navigation("teacher");

                    b.Navigation("tsubject");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.HasOne("EDiary.Models.lessonType", "lessType")
                        .WithMany()
                        .HasForeignKey("lessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "subjectTaught")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lessType");

                    b.Navigation("subjectTaught");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("studentGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("studentStatus");

                    b.HasOne("EDiary.Models.Subgroup", "subgroup")
                        .WithMany()
                        .HasForeignKey("studentSubgroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("studentUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("status");

                    b.Navigation("subgroup");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("teacherStatus");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("teacherUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("curatorId");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.HasOne("EDiary.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Mark", "mark")
                        .WithMany()
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("mark");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
