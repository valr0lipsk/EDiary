// <auto-generated />
using System;
using EDiary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDiary.Migrations
{
    [DbContext(typeof(EDContext))]
    [Migration("20220118080816_addLabs")]
    partial class addLabs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDiary.Models.EmojiStatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("emoji")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("statusId");

                    b.ToTable("emojiStatuses");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.Property<int>("labId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countLabs")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<string>("labName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("studentsCount")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("labId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("labs");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("lessonId");

                    b.HasIndex("lessonTypeId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("EDiary.Models.Mark", b =>
                {
                    b.Property<int>("markId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("markId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentGroup")
                        .HasColumnType("int");

                    b.Property<string>("studentLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("studentPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("studentStatus")
                        .HasColumnType("int");

                    b.Property<string>("studentSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("studentId");

                    b.HasIndex("studentGroup");

                    b.HasIndex("studentStatus");

                    b.HasIndex("studentUser");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Александр",
                            studentStatus = 0,
                            studentSurname = "Купреенко",
                            studentUser = "3"
                        },
                        new
                        {
                            studentId = 2,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Валерия",
                            studentStatus = 0,
                            studentSurname = "Липская",
                            studentUser = "9"
                        },
                        new
                        {
                            studentId = 3,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Анна",
                            studentStatus = 0,
                            studentSurname = "Бичевская",
                            studentUser = "10"
                        },
                        new
                        {
                            studentId = 4,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Матвей",
                            studentStatus = 0,
                            studentSurname = "Болтромеюк",
                            studentUser = "11"
                        },
                        new
                        {
                            studentId = 5,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Артем",
                            studentStatus = 0,
                            studentSurname = "Деревяго",
                            studentUser = "12"
                        },
                        new
                        {
                            studentId = 6,
                            studentGroup = 2,
                            studentLastname = "Николаевна",
                            studentName = "Мария",
                            studentStatus = 0,
                            studentSurname = "Барай",
                            studentUser = "13"
                        },
                        new
                        {
                            studentId = 7,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Николай",
                            studentStatus = 0,
                            studentSurname = "Беленович",
                            studentUser = "14"
                        },
                        new
                        {
                            studentId = 8,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Владимир",
                            studentStatus = 0,
                            studentSurname = "Валькович",
                            studentUser = "15"
                        },
                        new
                        {
                            studentId = 9,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Дарья",
                            studentStatus = 0,
                            studentSurname = "Войлокова",
                            studentUser = "16"
                        },
                        new
                        {
                            studentId = 10,
                            studentGroup = 2,
                            studentLastname = "Сергеевна",
                            studentName = "Екатерина",
                            studentStatus = 0,
                            studentSurname = "Воронина",
                            studentUser = "17"
                        },
                        new
                        {
                            studentId = 11,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Александр",
                            studentStatus = 0,
                            studentSurname = "Вусик",
                            studentUser = "18"
                        },
                        new
                        {
                            studentId = 12,
                            studentGroup = 2,
                            studentLastname = "Павлович",
                            studentName = "Иван",
                            studentStatus = 0,
                            studentSurname = "Глушков",
                            studentUser = "19"
                        },
                        new
                        {
                            studentId = 13,
                            studentGroup = 2,
                            studentLastname = "Владимирович",
                            studentName = "Антон",
                            studentStatus = 0,
                            studentSurname = "Журомский",
                            studentUser = "20"
                        },
                        new
                        {
                            studentId = 14,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Константин",
                            studentStatus = 0,
                            studentSurname = "Захарчик",
                            studentUser = "21"
                        },
                        new
                        {
                            studentId = 15,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Никита",
                            studentStatus = 0,
                            studentSurname = "Иванов",
                            studentUser = "22"
                        },
                        new
                        {
                            studentId = 16,
                            studentGroup = 2,
                            studentLastname = "Леонидович",
                            studentName = "Никита",
                            studentStatus = 0,
                            studentSurname = "Казачук",
                            studentUser = "23"
                        },
                        new
                        {
                            studentId = 17,
                            studentGroup = 2,
                            studentLastname = "Владимировна",
                            studentName = "Ксения",
                            studentStatus = 0,
                            studentSurname = "Каначевская",
                            studentUser = "24"
                        },
                        new
                        {
                            studentId = 18,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Даниил",
                            studentStatus = 0,
                            studentSurname = "Кобрик",
                            studentUser = "25"
                        },
                        new
                        {
                            studentId = 19,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Сергей",
                            studentStatus = 0,
                            studentSurname = "Ковалев",
                            studentUser = "26"
                        },
                        new
                        {
                            studentId = 20,
                            studentGroup = 2,
                            studentLastname = "Святославович",
                            studentName = "Иван",
                            studentStatus = 0,
                            studentSurname = "Мятеж",
                            studentUser = "27"
                        },
                        new
                        {
                            studentId = 21,
                            studentGroup = 2,
                            studentLastname = "Игоревич",
                            studentName = "Евгений",
                            studentStatus = 0,
                            studentSurname = "Савельев",
                            studentUser = "28"
                        },
                        new
                        {
                            studentId = 22,
                            studentGroup = 2,
                            studentLastname = "Александрович",
                            studentName = "Егор",
                            studentStatus = 0,
                            studentSurname = "Селюн",
                            studentUser = "29"
                        },
                        new
                        {
                            studentId = 23,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Анастасия",
                            studentStatus = 0,
                            studentSurname = "Соломевич",
                            studentUser = "30"
                        },
                        new
                        {
                            studentId = 24,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Мария",
                            studentStatus = 0,
                            studentSurname = "Тимощенко",
                            studentUser = "31"
                        },
                        new
                        {
                            studentId = 25,
                            studentGroup = 2,
                            studentLastname = "Аркадьевич",
                            studentName = "Никита",
                            studentStatus = 0,
                            studentSurname = "Турута",
                            studentUser = "32"
                        },
                        new
                        {
                            studentId = 26,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Кирилл",
                            studentStatus = 0,
                            studentSurname = "Францкевич",
                            studentUser = "33"
                        },
                        new
                        {
                            studentId = 27,
                            studentGroup = 2,
                            studentLastname = "Дмитриевич",
                            studentName = "Максим",
                            studentStatus = 0,
                            studentSurname = "Францкевич",
                            studentUser = "34"
                        },
                        new
                        {
                            studentId = 28,
                            studentGroup = 2,
                            studentLastname = "",
                            studentName = "Роман",
                            studentStatus = 0,
                            studentSurname = "Чэнь",
                            studentUser = "35"
                        },
                        new
                        {
                            studentId = 29,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Захар",
                            studentStatus = 0,
                            studentSurname = "Шибаков",
                            studentUser = "36"
                        },
                        new
                        {
                            studentId = 30,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Ксения",
                            studentStatus = 0,
                            studentSurname = "Школьная",
                            studentUser = "37"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("subjectPicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("subjectId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("teacherLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("teacherPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("teacherStatus")
                        .HasColumnType("int");

                    b.Property<string>("teacherSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId");

                    b.HasIndex("teacherStatus");

                    b.HasIndex("teacherUser");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            teacherId = 1,
                            teacherLastname = "Владимировна",
                            teacherName = "Валентина",
                            teacherStatus = 0,
                            teacherSurname = "Тынкович",
                            teacherUser = "1"
                        },
                        new
                        {
                            teacherId = 2,
                            teacherLastname = "Александровна",
                            teacherName = "Екатерина",
                            teacherStatus = 0,
                            teacherSurname = "Лазицкас",
                            teacherUser = "2"
                        },
                        new
                        {
                            teacherId = 3,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherStatus = 0,
                            teacherSurname = "Терешко",
                            teacherUser = "5"
                        },
                        new
                        {
                            teacherId = 4,
                            teacherLastname = "Александрович",
                            teacherName = "Сергей",
                            teacherStatus = 0,
                            teacherSurname = "Апанасевич",
                            teacherUser = "6"
                        },
                        new
                        {
                            teacherId = 5,
                            teacherLastname = "Валерьевна",
                            teacherName = "Дарья",
                            teacherStatus = 0,
                            teacherSurname = "Карпович",
                            teacherUser = "7"
                        },
                        new
                        {
                            teacherId = 6,
                            teacherLastname = "Владимировна",
                            teacherName = "Анастасия",
                            teacherStatus = 0,
                            teacherSurname = "Гордеюк",
                            teacherUser = "8"
                        });
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("curatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("groupId");

                    b.HasIndex("curatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            groupId = 1,
                            curatorId = 6,
                            groupName = "8к2491"
                        },
                        new
                        {
                            groupId = 2,
                            curatorId = 2,
                            groupName = "8к2492"
                        },
                        new
                        {
                            groupId = 3,
                            curatorId = 5,
                            groupName = "8к2493"
                        });
                });

            modelBuilder.Entity("EDiary.Models.lessonType", b =>
                {
                    b.Property<int>("lessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("lessonTypeId");

                    b.ToTable("lessonType");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.Property<int>("setmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("setmarkId");

                    b.HasIndex("lessonId");

                    b.HasIndex("markId");

                    b.HasIndex("studentId");

                    b.ToTable("setMarks");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.Property<int>("tsubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("tsubjectId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("subjectTaughts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "7adc4b4a-6283-4fe0-b52c-b14c1607dd22",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "teacher",
                            ConcurrencyStamp = "64a7e35c-dddf-498d-b042-541e09da9b15",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "student",
                            ConcurrencyStamp = "78e1d2c9-344d-4c16-89fc-f6ab32dee22e",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "headman",
                            ConcurrencyStamp = "0ded8fd6-b6c2-4708-81a0-55f2c7e16b52",
                            Name = "headman",
                            NormalizedName = "HEADMAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df712a45-2fd5-442e-b515-0d9fa61253b9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLnvWoso6Iz3mmImjZ3IHvu3Jcfnup67QaQl4LESYR4armBFWqNWzdEKAspPN5VXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be0784f6-1079-49ae-9a03-fa8d4c7816b8",
                            TwoFactorEnabled = false,
                            UserName = "tr000001"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4a67ce4-9492-45ef-b8d8-bf0e2fdb0ac7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEBipJHvkgeHZt2/p50sDjOM/WAeujQEWXLJ/BEwAuNV4sbf2Y12ymPHmaP3cOApUeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e8b4d66-c31b-4d20-81ee-058fa37c0f5f",
                            TwoFactorEnabled = false,
                            UserName = "tr000002"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66498cc9-6c4b-45a8-934b-89b00a9558cc",
                            Email = "kuper2468@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000001",
                            PasswordHash = "AQAAAAEAACcQAAAAECYyqJ7Vylct4KkNpsc6ekSFhT5RoKwocuDF59y7LggPgKgeMkkcU1nsJMEQmzLl2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28f581ae-d6ef-474b-bf21-1fc6db671bb2",
                            TwoFactorEnabled = false,
                            UserName = "st000001"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b88e4f79-ff2a-45d6-af8f-f5de7908cb30",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqHq1/6q+3DYGV/eLVZtyDnjI9UCCcOiQ0xPWNHEF44DMdeoUr+GYPNem74G7AaGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3331918a-3d48-4b33-a6a7-39ff83efdcb7",
                            TwoFactorEnabled = false,
                            UserName = "st000002"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5be1759-f98d-4c7f-827d-94553c9d7d8d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/KS+BW+/O3n/PZ4Qc6PZymYuG4uVr6M3oomXdgSC/Ir1tKQzDuIfC4EXnxIaeQGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f91316f8-21cd-44d0-8a58-167e5dcdb299",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf5d166e-9062-473e-a42c-151c8d9acb36",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEDSLlqW7aYgl53GFhiFk60CcQN94O+XheyW9On27py1yfaZCKjqDg2kX0z8m9Mwziw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f867fff4-9f4f-4ba7-8da2-ca3c2ba85295",
                            TwoFactorEnabled = false,
                            UserName = "tr000003"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b5a4fef-a76f-4440-954a-d9b5eb6f5a64",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEIRw1xo+EwpUxk8aK1457XyKINRxRAXMFGC4JRJ8EbwujKLc4kCeOe5c/y7CQlO9og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e85df78-4711-4466-af62-5a68f2ba66c4",
                            TwoFactorEnabled = false,
                            UserName = "tr000004"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f86b7050-ce21-482c-b9bd-d517dcebc141",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000005",
                            PasswordHash = "AQAAAAEAACcQAAAAELSQ0vbWs+7tBDBeBQ8tatleG4HH1XoDerjOdX4bJdl1kndne35pnXq0JSgEMr5HGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0d93a6f-e618-4e27-af40-a13557df93ff",
                            TwoFactorEnabled = false,
                            UserName = "tr000005"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e49e694-c8c1-4d2b-a8e0-73f628781bc8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrsq4HkzbTfz5sB/OqAuMsN1esYaQrSRTyLfa4UA/QA5cbCyk9r3LvSZo5aJCeCeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c747aa00-6b80-4125-aa1a-a7f6bd6a8f23",
                            TwoFactorEnabled = false,
                            UserName = "tr000006"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d326a278-ce64-4935-be5a-e6f7472ba1be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEN6w4hjpCPR64XBtRjj3i9oet/iQ8IaVwwC+zIrv+YvVo9TRUfnwebBubB19uGqSWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18426a45-02e3-4e4a-a948-98608f6c3236",
                            TwoFactorEnabled = false,
                            UserName = "st000003"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b136189-3e05-451c-bdc4-2b60d24fe9a2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcfPpvuxymizTazmCm/bWNNmdkhQwucnSUtegprQNnTRmECLB1sDHom13gY2fhRIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3390be29-b417-4b9a-8c37-7c067d5052ac",
                            TwoFactorEnabled = false,
                            UserName = "st000004"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d589d63-5ea1-4881-9da6-83744d4b55b7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEOOlVqR/J1AZPQ0wWgoEaSDmce+hopplazwouHphk0Yg/erBh4V53el8V6NlnI41UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73607b3e-fd38-49c3-933e-dd93e8ee2729",
                            TwoFactorEnabled = false,
                            UserName = "st000005"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "282d4e9d-a77f-4ad0-b08a-13a736048026",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000006",
                            PasswordHash = "AQAAAAEAACcQAAAAECVt/Hizhsuieb0emW0TyhCxMwi9JVq6IjZR5IYG5yslUSgIxcQjHDTYkAbBy9OvVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca31e3de-5a3a-4799-96a3-d2a6cb1c1aa0",
                            TwoFactorEnabled = false,
                            UserName = "st000006"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "208ffc87-7770-49bd-a4eb-d370cc42e645",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000007",
                            PasswordHash = "AQAAAAEAACcQAAAAECOU0o0QhN7cVXltWBTHdhHC5PjU0AJf7u4BPeeVJDQPGev1AL+8aqFWYIEv45v1rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "447e0a1d-2a57-4b03-b54a-85f67c925f13",
                            TwoFactorEnabled = false,
                            UserName = "st000007"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e0a652c-e502-43c0-9f8b-9749c9d86078",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000008",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLVyZrl4/DasigQcEZW23Q+86NO8jeBy+fFAD99Vz1QCGFrNw3RiGPUxhoYFYpKQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e14f5429-0d3d-4f55-9951-8391b6f67266",
                            TwoFactorEnabled = false,
                            UserName = "st000008"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daf79e37-3008-4d94-8780-bd68aa1baf7d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000009",
                            PasswordHash = "AQAAAAEAACcQAAAAEALBO2ksAPJAUWEHb3ISf4AtLpizUGcU3aSTnd77O6Iy8YSD+ag+V7wqgptEZFp14g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90548fba-578e-4abb-a30e-de278493a85a",
                            TwoFactorEnabled = false,
                            UserName = "st000009"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49b3d864-a5f6-447c-9f65-5a32b732269e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000010",
                            PasswordHash = "AQAAAAEAACcQAAAAEAd4vRF+k8ROAzF1Vn8zDa/bVcM5VHe1+h6Kfj9DOK8KnXP3/bd3ZaCbLiMLPQxHww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40208e2d-6bc6-4a0d-9a41-0e8bd473646a",
                            TwoFactorEnabled = false,
                            UserName = "st000010"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e897558-5c6f-48c4-a56c-9374f0683ef9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000011",
                            PasswordHash = "AQAAAAEAACcQAAAAEPoxb8HcVKjVUuAIt7UnW7p70p6g1+M8neI6J0ST168gr0+F6qM8QfDIQJdxG7m1HA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9c7c3c0-1d0e-4504-904c-5ebeddc871a0",
                            TwoFactorEnabled = false,
                            UserName = "st000011"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d5ced33-3d6f-4fd9-ae62-b75ea543b6c9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000012",
                            PasswordHash = "AQAAAAEAACcQAAAAEEl/oTTUvFfH4yRzSYCHnrHGSnnxqH5TVo/kk+5tpnKi7JVNxOfCWCun0PewGm8/3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d8f8688-e551-42aa-b164-cf2d83ec8b8a",
                            TwoFactorEnabled = false,
                            UserName = "st000012"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf0dfb37-b89e-4768-bfb4-84b5bd9eef5b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000013",
                            PasswordHash = "AQAAAAEAACcQAAAAEMI7hBj9RDsldH6LwOn0NF1fuo2x0cZXiZ28VuJgFHMsxSLygrFVup4eX3xBL9QA9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b7ceae7-ad19-40f6-8d79-cbe374a79124",
                            TwoFactorEnabled = false,
                            UserName = "st000013"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8906dc52-8353-4e32-94ba-a09af1c84f11",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000014",
                            PasswordHash = "AQAAAAEAACcQAAAAEG5ZFWFXzSDKzgBP7TQR/MRkpSShhtH+ByF+yLj73NoVrgSJYrC6ayJeXgtBi8mYLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a489692-e638-4832-8c07-46ccd96f3d38",
                            TwoFactorEnabled = false,
                            UserName = "st000014"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ced1e848-5df7-4b3c-819b-ec68455ca6ee",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000015",
                            PasswordHash = "AQAAAAEAACcQAAAAEAeNZU0VT5ehmojwHeCVy8XzSg27giB9af0hWubvX6Ww/SdiTnOFfVtb/kOF7c39Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79b08e98-bbcb-4a55-9cb5-1c5caa7be235",
                            TwoFactorEnabled = false,
                            UserName = "st000015"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66e7d96e-e9ca-468f-9982-08b77b8cc51f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000016",
                            PasswordHash = "AQAAAAEAACcQAAAAEKILEkhOeS3M5sY5iS/6U3Suy/0T5eBW+iaO9zs6Z0ii2BhNMC9lFBpnmeoua8sY/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e49da14-d96c-4fb3-8cd2-608e754da375",
                            TwoFactorEnabled = false,
                            UserName = "st000016"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe930179-bf3d-433f-a7d9-417aad02547d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000017",
                            PasswordHash = "AQAAAAEAACcQAAAAEPIkc67RxkzkPWarasZWweMnEk9NDX9yj9t9tI0H669c7yGBEZvLE0/HuYxB2+YVTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e072ef6-2b4a-41cc-99f1-abbe58ab20d3",
                            TwoFactorEnabled = false,
                            UserName = "st000017"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75457b03-11cd-44cd-8a51-9c6a08cf0860",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000018",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPxa3+ZcoKVXCP4FedH71GX4m8weq7OuOzA6ameyhVijbKpwCAHfxBiyeamm9fQAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26b6d6be-deae-49dd-a90b-511c2c39062c",
                            TwoFactorEnabled = false,
                            UserName = "st000018"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "195fb3fb-7bd7-4c3f-a268-f1686497fc17",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000019",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3217jwbsiLEL7SsMyLtCv9Dul3x/DdpOyixBQVb2rLEW47ihfl6nUW9cLON2xvLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b400f8c5-925c-4ee5-ad57-899940da4efd",
                            TwoFactorEnabled = false,
                            UserName = "st000019"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd4a7d3e-a5b5-45d1-82b6-0a7ddb7d882b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000020",
                            PasswordHash = "AQAAAAEAACcQAAAAEG5ISKxWwMnpmwhdbY44D2eHo2K+t3g6qmsU7f35F0chUobjaeyLq3AguqzPul1dnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "435b3f84-ed3e-4451-b2c3-fd0c450e1a94",
                            TwoFactorEnabled = false,
                            UserName = "st000020"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e94f197-470f-4527-9817-9fd8b69492e1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000021",
                            PasswordHash = "AQAAAAEAACcQAAAAED4asMmXP0Zwl0d87ZTMCtzUUqyerQ+pcebHnv/OpEev5cVbXjYea2XIUB0l3v3D4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d59e128-a733-4fa6-a5ab-73050c1f6854",
                            TwoFactorEnabled = false,
                            UserName = "st000021"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f144eaab-d3d6-4f77-9f66-0dad5c919819",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000022",
                            PasswordHash = "AQAAAAEAACcQAAAAENKQq6FA/OxY7te1SnKKZoM1eDEqRBc9JKf50xWIazdQmWuu9mopr0h/gKtmuxLbJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ae9d8be-c401-4a06-8973-cc6ba168bd8d",
                            TwoFactorEnabled = false,
                            UserName = "st000022"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf9d8e5e-d438-4f8c-b91b-56e8c58afbff",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000023",
                            PasswordHash = "AQAAAAEAACcQAAAAEEy8MgOMVzyuQib08+JbCwJkoESGrKUoJmypsDSPG6RdhDWd6IgPKFPP1leLil81yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d664c7e9-86b3-41ae-9c0e-a921f8637afa",
                            TwoFactorEnabled = false,
                            UserName = "st000023"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b78aee5-32bd-438d-9182-8dbca3d3506d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000024",
                            PasswordHash = "AQAAAAEAACcQAAAAEOojqKnPpbP/zfCnY7McvN4CDksIvGilsysz3cIwC52u5Cfv38ozJl/9bD7afeKoVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fadc3e6-7820-4881-9ae3-856d6199b48e",
                            TwoFactorEnabled = false,
                            UserName = "st000024"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8faef87-d85b-44a3-b4fb-d9e216376f27",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000025",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6KUwpyZxMx/Dt1DdwiEDY1WfgIfzPyr9yDjpRtwp2dYedPsRYrDcP8OIVleWEu0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecb88549-c45d-4b2b-a564-1c4a5b705a6e",
                            TwoFactorEnabled = false,
                            UserName = "st000025"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fc2a4d8-54c4-42dd-84c0-66d9b72eceba",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000026",
                            PasswordHash = "AQAAAAEAACcQAAAAEE1WspBoc3VVrkfkSga9w3dYIlWoI3+oEk7I8rxpKWH5H8ID1ZWa7FTt33KOGLrVGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beb0f1c6-1729-4116-a10f-ae2794ca19b9",
                            TwoFactorEnabled = false,
                            UserName = "st000026"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a790784-8d3f-4c19-8695-0bf6fc80213f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000027",
                            PasswordHash = "AQAAAAEAACcQAAAAELRcIgMHN3JIT2Wm63QxWEDzbILWGe0qM706f0hwNgSMi4tK5bl2lE2YQCISuYr94g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a7ffc63-7041-4668-9406-6312ce677f8d",
                            TwoFactorEnabled = false,
                            UserName = "st000027"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76dd7d15-7418-4087-b0f7-569c5b3fa29c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000028",
                            PasswordHash = "AQAAAAEAACcQAAAAENNR5UfwD2pilayTuRmAUe2jYwmwqe/D2qWqKQ42vSdltu7dEQglRGMKUP6pt9jbYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a3fe050-203d-48b0-a559-39ca15047b5c",
                            TwoFactorEnabled = false,
                            UserName = "st000028"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d0531ff-ffaa-4c61-8e46-169adfbd82d6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000029",
                            PasswordHash = "AQAAAAEAACcQAAAAELgrFAPqk1fNb3UbxqkyIBrX6KYM046CHO5cTVVdOg256OTVZkPy7qilxyLub2JiRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1052af17-b375-4337-9af3-883139b28a1f",
                            TwoFactorEnabled = false,
                            UserName = "st000029"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "377b6add-830c-4e35-87f2-4f51b17c1578",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000030",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWY/BZblD/yEhs+gJ8jVfYrvLqDkDUP0jYTlXGal2dLrUoiKzq/tyOm1Q3kwKsL3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "016c9b42-5e8f-4e0b-a79c-a48a6d5ff991",
                            TwoFactorEnabled = false,
                            UserName = "st000030"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EDiary.Models.Labs", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.HasOne("EDiary.Models.lessonType", "lessType")
                        .WithMany()
                        .HasForeignKey("lessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.subjectTaught", "subjectTaught")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lessType");

                    b.Navigation("subjectTaught");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("studentGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("studentStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("studentUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.HasOne("EDiary.Models.EmojiStatus", "status")
                        .WithMany()
                        .HasForeignKey("teacherStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("teacherUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("curatorId");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.HasOne("EDiary.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Mark", "mark")
                        .WithMany()
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("mark");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
