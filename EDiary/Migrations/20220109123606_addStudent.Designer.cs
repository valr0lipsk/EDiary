// <auto-generated />
using System;
using EDiary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDiary.Migrations
{
    [DbContext(typeof(EDContext))]
    [Migration("20220109123606_addStudent")]
    partial class addStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDiary.Models.Admin", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("adminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("adminUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("adminId");

                    b.HasIndex("adminRole");

                    b.HasIndex("adminUser");

                    b.ToTable("admins");

                    b.HasData(
                        new
                        {
                            adminId = 1,
                            adminRole = "admin",
                            adminUser = "4"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("tsubjectId")
                        .HasColumnType("int");

                    b.HasKey("lessonId");

                    b.HasIndex("tsubjectId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("EDiary.Models.Mark", b =>
                {
                    b.Property<int>("markId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("markId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentGroup")
                        .HasColumnType("int");

                    b.Property<string>("studentLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("studentPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("studentRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("studentSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("studentUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("studentId");

                    b.HasIndex("studentGroup");

                    b.HasIndex("studentRole");

                    b.HasIndex("studentUser");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Александр",
                            studentRole = "student",
                            studentSurname = "Купреенко",
                            studentUser = "3"
                        },
                        new
                        {
                            studentId = 2,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Валерия",
                            studentRole = "student",
                            studentSurname = "Липская",
                            studentUser = "9"
                        },
                        new
                        {
                            studentId = 3,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Анна",
                            studentRole = "student",
                            studentSurname = "Бичевская",
                            studentUser = "10"
                        },
                        new
                        {
                            studentId = 4,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Матвей",
                            studentRole = "student",
                            studentSurname = "Болтромеюк",
                            studentUser = "11"
                        },
                        new
                        {
                            studentId = 5,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Артем",
                            studentRole = "student",
                            studentSurname = "Деревяго",
                            studentUser = "12"
                        },
                        new
                        {
                            studentId = 6,
                            studentGroup = 2,
                            studentLastname = "Николаевна",
                            studentName = "Мария",
                            studentRole = "student",
                            studentSurname = "Барай",
                            studentUser = "13"
                        },
                        new
                        {
                            studentId = 7,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Николай",
                            studentRole = "student",
                            studentSurname = "Беленович",
                            studentUser = "14"
                        },
                        new
                        {
                            studentId = 8,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Владимир",
                            studentRole = "student",
                            studentSurname = "Валькович",
                            studentUser = "15"
                        },
                        new
                        {
                            studentId = 9,
                            studentGroup = 2,
                            studentLastname = "Дмитриевна",
                            studentName = "Дарья",
                            studentRole = "student",
                            studentSurname = "Войлокова",
                            studentUser = "16"
                        },
                        new
                        {
                            studentId = 10,
                            studentGroup = 2,
                            studentLastname = "Сергеевна",
                            studentName = "Екатерина",
                            studentRole = "student",
                            studentSurname = "Воронина",
                            studentUser = "17"
                        },
                        new
                        {
                            studentId = 11,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Александр",
                            studentRole = "student",
                            studentSurname = "Вусик",
                            studentUser = "18"
                        },
                        new
                        {
                            studentId = 12,
                            studentGroup = 2,
                            studentLastname = "Павлович",
                            studentName = "Иван",
                            studentRole = "student",
                            studentSurname = "Глушков",
                            studentUser = "19"
                        },
                        new
                        {
                            studentId = 13,
                            studentGroup = 2,
                            studentLastname = "Владимирович",
                            studentName = "Антон",
                            studentRole = "student",
                            studentSurname = "Журомский",
                            studentUser = "20"
                        },
                        new
                        {
                            studentId = 14,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Константин",
                            studentRole = "student",
                            studentSurname = "Захарчик",
                            studentUser = "21"
                        },
                        new
                        {
                            studentId = 15,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Никита",
                            studentRole = "student",
                            studentSurname = "Иванов",
                            studentUser = "22"
                        },
                        new
                        {
                            studentId = 16,
                            studentGroup = 2,
                            studentLastname = "Леонидович",
                            studentName = "Никита",
                            studentRole = "student",
                            studentSurname = "Казачук",
                            studentUser = "23"
                        },
                        new
                        {
                            studentId = 17,
                            studentGroup = 2,
                            studentLastname = "Владимировна",
                            studentName = "Ксения",
                            studentRole = "student",
                            studentSurname = "Каначевская",
                            studentUser = "24"
                        },
                        new
                        {
                            studentId = 18,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Даниил",
                            studentRole = "student",
                            studentSurname = "Кобрик",
                            studentUser = "25"
                        },
                        new
                        {
                            studentId = 19,
                            studentGroup = 2,
                            studentLastname = "Олегович",
                            studentName = "Сергей",
                            studentRole = "student",
                            studentSurname = "Ковалев",
                            studentUser = "26"
                        },
                        new
                        {
                            studentId = 20,
                            studentGroup = 2,
                            studentLastname = "Святославович",
                            studentName = "Иван",
                            studentRole = "student",
                            studentSurname = "Мятеж",
                            studentUser = "27"
                        },
                        new
                        {
                            studentId = 21,
                            studentGroup = 2,
                            studentLastname = "Игоревич",
                            studentName = "Евгений",
                            studentRole = "student",
                            studentSurname = "Савельев",
                            studentUser = "28"
                        },
                        new
                        {
                            studentId = 22,
                            studentGroup = 2,
                            studentLastname = "Александрович",
                            studentName = "Егор",
                            studentRole = "student",
                            studentSurname = "Селюн",
                            studentUser = "29"
                        },
                        new
                        {
                            studentId = 23,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Анастасия",
                            studentRole = "student",
                            studentSurname = "Соломевич",
                            studentUser = "30"
                        },
                        new
                        {
                            studentId = 24,
                            studentGroup = 2,
                            studentLastname = "Александровна",
                            studentName = "Мария",
                            studentRole = "student",
                            studentSurname = "Тимощенко",
                            studentUser = "31"
                        },
                        new
                        {
                            studentId = 25,
                            studentGroup = 2,
                            studentLastname = "Аркадьевич",
                            studentName = "Никита",
                            studentRole = "student",
                            studentSurname = "Турута",
                            studentUser = "32"
                        },
                        new
                        {
                            studentId = 26,
                            studentGroup = 2,
                            studentLastname = "Андреевич",
                            studentName = "Кирилл",
                            studentRole = "student",
                            studentSurname = "Францкевич",
                            studentUser = "33"
                        },
                        new
                        {
                            studentId = 27,
                            studentGroup = 2,
                            studentLastname = "Дмитриевич",
                            studentName = "Максим",
                            studentRole = "student",
                            studentSurname = "Францкевич",
                            studentUser = "34"
                        },
                        new
                        {
                            studentId = 28,
                            studentGroup = 2,
                            studentLastname = "",
                            studentName = "Роман",
                            studentRole = "student",
                            studentSurname = "Чэнь",
                            studentUser = "35"
                        },
                        new
                        {
                            studentId = 29,
                            studentGroup = 2,
                            studentLastname = "Сергеевич",
                            studentName = "Захар",
                            studentRole = "student",
                            studentSurname = "Шибаков",
                            studentUser = "36"
                        },
                        new
                        {
                            studentId = 30,
                            studentGroup = 2,
                            studentLastname = "Вадимовна",
                            studentName = "Ксения",
                            studentRole = "student",
                            studentSurname = "Школьная",
                            studentUser = "37"
                        });
                });

            modelBuilder.Entity("EDiary.Models.Subject", b =>
                {
                    b.Property<int>("subjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("subjectName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("subjectId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("teacherLastname")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("teacherPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("teacherRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("teacherSurname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("teacherUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId");

                    b.HasIndex("teacherRole");

                    b.HasIndex("teacherUser");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            teacherId = 1,
                            teacherLastname = "Владимировна",
                            teacherName = "Валентина",
                            teacherRole = "teacher",
                            teacherSurname = "Тынкович",
                            teacherUser = "1"
                        },
                        new
                        {
                            teacherId = 2,
                            teacherLastname = "Александровна",
                            teacherName = "Екатерина",
                            teacherRole = "teacher",
                            teacherSurname = "Лазицкас",
                            teacherUser = "2"
                        },
                        new
                        {
                            teacherId = 3,
                            teacherLastname = "Николаевна",
                            teacherName = "Ольга",
                            teacherRole = "teacher",
                            teacherSurname = "Терешко",
                            teacherUser = "5"
                        },
                        new
                        {
                            teacherId = 4,
                            teacherLastname = "Александрович",
                            teacherName = "Сергей",
                            teacherRole = "teacher",
                            teacherSurname = "Апанасевич",
                            teacherUser = "6"
                        },
                        new
                        {
                            teacherId = 5,
                            teacherLastname = "Валерьевна",
                            teacherName = "Дарья",
                            teacherRole = "teacher",
                            teacherSurname = "Карпович",
                            teacherUser = "7"
                        },
                        new
                        {
                            teacherId = 6,
                            teacherLastname = "Владимировна",
                            teacherName = "Анастасия",
                            teacherRole = "teacher",
                            teacherSurname = "Гордеюк",
                            teacherUser = "8"
                        });
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("curatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("groupId");

                    b.HasIndex("curatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            groupId = 1,
                            curatorId = 6,
                            groupName = "8к2491"
                        },
                        new
                        {
                            groupId = 2,
                            curatorId = 2,
                            groupName = "8к2492"
                        },
                        new
                        {
                            groupId = 3,
                            curatorId = 5,
                            groupName = "8к2493"
                        });
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.Property<int>("setmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("setmarkId");

                    b.HasIndex("lessonId");

                    b.HasIndex("markId");

                    b.HasIndex("studentId");

                    b.ToTable("setMarks");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.Property<int>("tsubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("tsubjectId");

                    b.HasIndex("groupId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("subjectTaughts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "7d414aa5-dac9-4289-a97c-d75fa349c6a1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "teacher",
                            ConcurrencyStamp = "6a339c76-eb44-4075-992f-589bf019d192",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "student",
                            ConcurrencyStamp = "9688b048-a770-428d-8ded-8fe3832c6bd4",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c67e3ef8-0221-4014-bbed-dc7c2b7ab0be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxshtzEr289ADehRAwHIkxPauK8xiW8oJAIO/Mb/q8Gs5Fo17Tdmq92yVoGeRpzxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c2d5eb7-f8fc-46ef-9d4b-3000935dc0fd",
                            TwoFactorEnabled = false,
                            UserName = "tr000001"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19a8c810-08c8-4a0a-99f5-2ef5e997280a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEL85+csghmXReWHQ4Xj/MsqIyFWofDhB1QdlZxBYmhernOIlQkrO4oJi6hG0FZtkQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59f877c2-d813-436d-9104-046766c4115a",
                            TwoFactorEnabled = false,
                            UserName = "tr000002"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2650a5a-1493-4052-996e-1f9215455e91",
                            Email = "kuper2468@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEBU4KZJFdORkVxcAg9AboKluStfAmtmpmgouCgDotIehW7AJ1vATzDQcF6U02ou+aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c171bb02-230e-4276-987e-0f76acefe4a8",
                            TwoFactorEnabled = false,
                            UserName = "st000001"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f988af2d-6573-48b2-8374-cc0d3cf63330",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000002",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFsTi6kTBHxCw6i871KFyaVpctOULP8ynjaTkkqJNxGNkVvgMFM/nFpU3agZYq4WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d23c635-d432-49be-ae32-f609e28e3e84",
                            TwoFactorEnabled = false,
                            UserName = "st000002"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "439a88a5-ebc5-485c-a797-6f641afcda81",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJqyh9YtJWdfOzzpx14F4WO0bHPsVB5L8yiNk1Xq7RoU2KV0yIJLYgOp5A7thhGP9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b887ce99-2065-4ec0-b0c4-8b16810eb253",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5072d095-da9a-488b-b6fa-21b67da63686",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000003",
                            PasswordHash = "AQAAAAEAACcQAAAAECVrHDmBMYHASJ7lkfhRL1ob871C7KTbQQt+2N6Dy9p/2nPoKLTln7TNnY9pLkowvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6733d4a7-0184-4619-af08-f32367c9c3e1",
                            TwoFactorEnabled = false,
                            UserName = "tr000003"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c483eb3f-ae2e-4b83-af77-dc0a35285385",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEGg84VmYVrGghwO1vua/BEljMXieaIOxXpp1dugXHYX/9pVHI3BMfAh1XEl2QvDd/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0efe2d34-13ec-4893-8381-f02171389b29",
                            TwoFactorEnabled = false,
                            UserName = "tr000004"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4f0cec1-753c-4893-b2a9-301b518af7d2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6IvcsPUo+czq9wRX0M3L13fZZ/PIiEOj/RXpo+XHa3HaGzxvT5tkET0sXhLuUu2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2e318cd-dec6-42d0-aeaa-479e7bb0be12",
                            TwoFactorEnabled = false,
                            UserName = "tr000005"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f664e97-ab6b-40ca-a75f-ea3e0993b468",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TR000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEC9HsErR6PKlTL1J+JihLYTjxcxg4RwzOVgjVJBQejeWjgbETSzQKpWOZRo1teuZPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1f69750-60ff-4661-8390-bc8141899a4e",
                            TwoFactorEnabled = false,
                            UserName = "tr000006"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7cf4fac-7e9f-4941-8cc2-821e5af4b8f0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000003",
                            PasswordHash = "AQAAAAEAACcQAAAAEIEonkLvk2jzH+FxOBZgCoNuG5+OIUohbbhoPAtz5ZWlk3nwJlCVkZwruayhAsXk9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c85b1428-6368-4fab-9e91-85fac4516970",
                            TwoFactorEnabled = false,
                            UserName = "st000003"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5648858f-152b-4f58-93fd-0b264badd054",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000004",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtpKsoT27lNe3iwAU6v8M9lhJmQnyQrnu5KK84bdg8igi5YmOzZHOeEQXanRuofqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81290a24-0120-4460-ae24-c9cba9cc28ac",
                            TwoFactorEnabled = false,
                            UserName = "st000004"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1d54701-f391-49f2-a1cc-cdfcce3a7e4f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000005",
                            PasswordHash = "AQAAAAEAACcQAAAAEFX3PpaPaboQm0R5/GjQx9EuNslQHG9XgAR7zguUBK17T+ObO+57loWUC8Yiy6jLdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81cb020f-2822-48b4-baf0-494a1f9be741",
                            TwoFactorEnabled = false,
                            UserName = "st000005"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed35400a-19eb-4eac-bf9d-d0db2c106fef",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000006",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUOJ7pF4Myl6j5paxU1bn9CiJR0nIhTutUy9sNkZ/VBN7sfNAQzBdmXLFHpJWpqrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4883175e-1a62-4af3-af85-add31254f9ea",
                            TwoFactorEnabled = false,
                            UserName = "st000006"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a22c93d3-990c-4601-a8f7-839fe3d400ed",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000007",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7U6vbyDFv5ls8vqn/N2pk1L30/XG+WLjbJMB15uLXhgtjwc5odCpdWDhyahz/dTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "562706ee-5680-473d-8da2-db9b8e5afdd9",
                            TwoFactorEnabled = false,
                            UserName = "st000007"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd1d55cd-8618-4c66-b8d0-d5ca2f72ea07",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000008",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbYy2S//an0ZoWTzI6D5hCm2+s9s8A9DGMbOauPH3z01jzVoxL0KVMmywAmN6WCQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eba1e38-0f77-40d0-96b3-b4d40c259376",
                            TwoFactorEnabled = false,
                            UserName = "st000008"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b28f18e0-3cb5-4c81-9d5f-bb94441c4cce",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000009",
                            PasswordHash = "AQAAAAEAACcQAAAAEMEr7lUUL7ob2lUTzqnGSXH+7PFkbH93A90zlwE9IYFxT5ivChw5zTelNODLyOo49g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a4e3bef-250d-4919-941e-35f922b474bd",
                            TwoFactorEnabled = false,
                            UserName = "st000009"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b10f8031-02d2-41b3-9727-b68225a1b495",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000010",
                            PasswordHash = "AQAAAAEAACcQAAAAEPrcO3W0RXrUlUkO8bUGvdx3e/h4VWDZD3Y6678uXIIWBW0KNEL8EcfWCFbXADhW8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bd9146c-9ec3-4396-bcf7-b0eaf01c3ba3",
                            TwoFactorEnabled = false,
                            UserName = "st000010"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a696f8bf-fde6-42d5-83ab-5b647dafb6a7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000011",
                            PasswordHash = "AQAAAAEAACcQAAAAEG1mx/leuWoH1Bcog6trYP+ioZvw0UNxm4tAHdo0YCbhOXfYNlU6pSGJIq7kIF0big==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e7320e-b6d5-45ad-8702-ddaa9c1210e4",
                            TwoFactorEnabled = false,
                            UserName = "st000011"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75be18eb-e605-4719-953f-a17e9753f78f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000012",
                            PasswordHash = "AQAAAAEAACcQAAAAELw7DB5H/CBJHg15KSSCZpej76L4Y7UijrhAk8UmCWX63ClnB8baWKpsLoW6UZRLOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97ae4a9e-17c3-4f1d-b72c-21840e63957a",
                            TwoFactorEnabled = false,
                            UserName = "st000012"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ef2cbe-500f-43fc-a855-0694c710fa5f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000013",
                            PasswordHash = "AQAAAAEAACcQAAAAEG3BybzoPCiwPl8Tf6+B2Klnzlr26qpyDuMsxHa+Ss6QR4WxXDjbTe69H2pUJWR9mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70708257-b4b9-4a68-af00-cd0d3656b38b",
                            TwoFactorEnabled = false,
                            UserName = "st000013"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01acf754-dc01-4a5d-a32f-88b093c7b740",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000014",
                            PasswordHash = "AQAAAAEAACcQAAAAEA+BUNujKF7qXiXOgbEmFrcEwMbSnpawbwoPOzq8DOP4o9+iWCD6asGa/6NDZLGYHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "831b67ae-f1c3-4739-a21a-aec1fdaa9c79",
                            TwoFactorEnabled = false,
                            UserName = "st000014"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8740971f-b96d-4e23-af4d-dcefd0656b5a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000015",
                            PasswordHash = "AQAAAAEAACcQAAAAEJL26eY19hFnmYL0JpxKYw/Evn01UfOEfLq2+pV00YYiwncqEFKUWe1uYFlHyZPn1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d744b728-c008-4fc7-b75f-373c83df4689",
                            TwoFactorEnabled = false,
                            UserName = "st000015"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36a71c1c-7824-4281-80e4-4ef122847ca9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000016",
                            PasswordHash = "AQAAAAEAACcQAAAAEFDgPOrwOUUIVQtT8isPHdUaUK15wysRfUP34P3b7FST7os3gmCPURkGX+6eioc8RA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9dccd57-f269-4fba-94f0-0784d079815d",
                            TwoFactorEnabled = false,
                            UserName = "st000016"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6bcf4ee-00aa-4dac-a05c-1fecbf0a4f1a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000017",
                            PasswordHash = "AQAAAAEAACcQAAAAEIkIyEVAUTqYJ0/wh4JNQtjd+eAP7pyNyTw4h5NnsNGhk1vc7CYbBeW82dfsp1tLjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19ad13fa-b0a3-4e82-a192-1ac7ae5fc466",
                            TwoFactorEnabled = false,
                            UserName = "st000017"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07470af9-7290-4ebf-9880-6866c31862a4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000018",
                            PasswordHash = "AQAAAAEAACcQAAAAEAlcdNL5l29da2PCABe+yijC51uAeWB4cmZCkzocv2N30xJZeZ0TYDHZ/mXFqUu13Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f12dcd5d-e91a-4ddc-b02a-477755850616",
                            TwoFactorEnabled = false,
                            UserName = "st000018"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "280e5abb-5a2d-46db-a58b-af2b081cab3e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000019",
                            PasswordHash = "AQAAAAEAACcQAAAAEJOTiHSB+sp2YgNL+CHxz/RSZo9a0chsxaBpB/GLD/T+ZIxq5u2DEhRKEoVGkLv+VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1020b9ad-a41d-4e25-9bf2-f05a7c273437",
                            TwoFactorEnabled = false,
                            UserName = "st000019"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61916daa-96b9-4af8-b486-58d79721209d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000020",
                            PasswordHash = "AQAAAAEAACcQAAAAEDIMZTwCbPoBNuPgIzA60xt9zBB97rx6puAn8CaFzfgk4gTL+CYA/ctySimu6GXtWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd6860c1-1ef0-4236-ae48-596834e080cd",
                            TwoFactorEnabled = false,
                            UserName = "st000020"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d01f9825-ba79-44d2-9774-58c99623a2f1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000021",
                            PasswordHash = "AQAAAAEAACcQAAAAELyZSGIYpXf46KnQ7nAVKUCZacet0b8f1ODMY7bJlf9rW9hkb+tFu0pRnFRV7FiJ4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd68866f-9aa0-4e03-9f68-1ae4a148e4d2",
                            TwoFactorEnabled = false,
                            UserName = "st000021"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f8ef1c2-64ce-4ee9-8f45-15875b9f034f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000022",
                            PasswordHash = "AQAAAAEAACcQAAAAEC0L5cgbG72TyUl3ecklJm50LHtkvOX8AV4CmiRPkSpliKQ2SbyAm0soZeonxOJjTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51d865d9-d1e8-439a-8c16-207781b4d3ef",
                            TwoFactorEnabled = false,
                            UserName = "st000022"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9335b60-541b-4814-8f73-5547b1faba68",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000023",
                            PasswordHash = "AQAAAAEAACcQAAAAEAa14jXW4CrwB2aF7GJAFE0fkbqcpgqp78jac8GVf6ayPzw3obZhRzSqr7mG4UsWAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7d82396-5db9-4c26-8283-e1f90e1d9bee",
                            TwoFactorEnabled = false,
                            UserName = "st000023"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc0abdc5-fe44-4108-a051-6bf760d10084",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000024",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbtIB0KfEXYg9Fh0nYxLzV92hYecccT6tucWv0j9ioi4e84XYtVc2VuRFPZELVwjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b01fd8a-604b-4777-9c57-d83fe39f5995",
                            TwoFactorEnabled = false,
                            UserName = "st000024"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66654a18-63d4-42fa-ae2d-320973f951e3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000025",
                            PasswordHash = "AQAAAAEAACcQAAAAEKfnS57/pgKL0j3htqJIiKQQb9xbjvRcbrOI5u9CCJcWThuGSJASMcgWipegMQyWhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddbfa1bf-a0e3-46cd-80a9-163a3d6e17f5",
                            TwoFactorEnabled = false,
                            UserName = "st000025"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d80abdf-bef7-4bc2-a5c5-a19590423973",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000026",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKDJsNLQEAXPhHIxlM7ZRYwE1mfMRduadgaCoVCJs6OFQ8ARScPSOQ+Gy84gsJwUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e8f2bd1-9b1b-4dc2-b8a4-c047a1ac6d69",
                            TwoFactorEnabled = false,
                            UserName = "st000026"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f583f53f-e0f2-4160-89e2-8538faf9cbc9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000027",
                            PasswordHash = "AQAAAAEAACcQAAAAEALr4sE0G33bOh3tYSsLdYdX7Ow24Tnxg0bF7d0PLY1Af0OVdXKJ9hXmyKh3x+kHaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e00545d-bf9b-49d5-889b-de20ecc81c5b",
                            TwoFactorEnabled = false,
                            UserName = "st000027"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfec322b-5bd7-4cd3-9fc3-a818725a081d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000028",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYF2Yxg6/qTsOpB5UxgHNmsFo4s5yYP00cZAAQvpZzohToCEaDfHOxKWRpcD2HIbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fedea50b-2694-44e8-97de-e3af4a976908",
                            TwoFactorEnabled = false,
                            UserName = "st000028"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34d08df8-2a26-4ac5-9f53-76428d697c95",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000029",
                            PasswordHash = "AQAAAAEAACcQAAAAELVD2dbIPrmb09679M6tMXR6jnl3wVdhvW5LqJUqGRRH0ZP1lbMgTIhznZcmXdYIGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ab12e4d-32b4-4f82-bcca-2c45aaf582b2",
                            TwoFactorEnabled = false,
                            UserName = "st000029"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0867d5d0-cd96-457d-975b-5d8098eee53f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ST000030",
                            PasswordHash = "AQAAAAEAACcQAAAAEENIMCd3MFTKDCCxc09xj8E3mR/G0s5oqi2dO5V0QAtgffgMivSmAJDiutD0VlVR+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6c226a5-74c5-4071-9e44-78171f31b61f",
                            TwoFactorEnabled = false,
                            UserName = "st000030"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EDiary.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("adminRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "adUser")
                        .WithMany()
                        .HasForeignKey("adminUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adUser");

                    b.Navigation("role");
                });

            modelBuilder.Entity("EDiary.Models.Lesson", b =>
                {
                    b.HasOne("EDiary.Models.subjectTaught", "subjectTaught")
                        .WithMany()
                        .HasForeignKey("tsubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subjectTaught");
                });

            modelBuilder.Entity("EDiary.Models.Student", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("studentGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("studentRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("studentUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("teacherRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "user")
                        .WithMany()
                        .HasForeignKey("teacherUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EDiary.Models.collegeGroup", b =>
                {
                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("curatorId");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EDiary.Models.setMark", b =>
                {
                    b.HasOne("EDiary.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Mark", "mark")
                        .WithMany()
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("mark");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EDiary.Models.subjectTaught", b =>
                {
                    b.HasOne("EDiary.Models.collegeGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDiary.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
